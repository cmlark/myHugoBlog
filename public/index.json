[{"content":"1.死锁的概念 （1）.什么是死锁 在并发环境下，各进程因竞争资源而造成的一种互相等待对方手里的资源，导致各进程都阻塞，都无法向前推进的现象，就是“死锁”。发生死锁后若无外力干涉，这些进程都将无法向前推进。\n]\n（2）.死锁，饥饿，死循环的 区别 死锁：各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。\n饥饿：由于长期得不到想要的资源，某进程无法向前推进的现象。比如：在短进程优先（SPF）算法中，若有源源不断的短进程到来，则长进程一直得不到处理机，从而发生长进程“饥饿”。\n死循环：某进程执行过程中一直跳不出某个循环的现象。有时是因为程序逻辑 BUG 导致的，有时是因为程序猿故意设计的。\n上面三个问题都是进程无法顺利向前推进的现象（故意设计的死循环除外）。\n死锁一定是“循环等待对方手里的资源”导致的，因此如果有死锁现象，那至少有两个或两个以上的进程同时发生死锁。发生死锁的进程一定处于阻塞态。\n饥饿可能是只有一个进程发生饥饿。发生饥饿的进程既可能是阻塞态（如长期得不到需要的 I/O 设备），也有可能是就绪态（长期得不到处理机）。\n死循环可能只有一个进程发生死循环。死循环的进程可以上处理机运行（可以是运行态），只不过无法像期待的那样顺利推进。死锁和饥饿问题是由于操作系统分配资源策略不合理导致的，而死循环是由于代码逻辑的错误导致的。死锁和饥饿是管理者（操作系统）的问题，死循环是被管理者的问题。\n（3）.死锁产生的必要条件 产生死锁必须同时满足以下四个条件，只要其中任意一条件不成立，死锁就不会发生。\n互斥条件：只有对必须互斥使用的资源的争抢彩会导致死锁（如打印机设备）。像内存，扬声器这种可以同时让多个进程使用的资源是不会导致死锁的（因为进程不用阻塞等待这种资源）。 不剥夺条件：进程所获得的资源在未使用完之前，不能由其他进程强行夺走，只能主动释放。 请求和保持条件：进程已经保持了至少一个资源，但是又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被堵塞，但又对自己已有的资源保持不放。 循环等待条件：存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求。 注意，发生死锁时一定有循环等待，但是发生循环等待时未必死锁（循环等待是死锁的必要不充分条件）。\n如果同类资源的数量大于 1，则即使有循环等待，也未必发生死锁。但如果系统中每类资源都只有一个，那循环等待就是死锁的充分必要条件了。\n（4）什么时候会发生死锁 1．对系统资源的竟争。各进程对不可剥夺的资源（如打印机）的竞争可能引起死锁，对可剥夺的资源(CPU）的竞争是不会引起死锁的。\n2．进程推进顺序非法。请求和释放资源的顺序不当，也同样会导致死锁。例如，并发执行的进程 P1. P2 分别申请并占有了资源 R1. R2，之后进程 P1 又紧接着申请资源 R2，而进程 P2 又申请资源 R1. 两者会因为申请的资源被对方占有而阻塞，从而发生死锁。\n3．信号量的使用不当也会造成死锁。如生产者一消费者问题中，如果实现互斥的 P 操作在实现同步的 P 操作之前，就有可能导致死锁。（可以把互斥信号量、同步信号量也看做是一种抽象的系统资源）\n总之，对不可剥夺资源的不合理分配，可能导致死锁。 （5）.死锁的处理策略 1．预防死锁。破坏死锁产生的四个必要条件中的一个或几个。 2．避免死锁。用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法） 3．死锁的检测和解除。允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措施解除死锁。\n（6）.知识回顾 2.死锁处理的策略 （1）破坏互斥条件 互斥条件：只有对必须互斥使用的资源的争抢才会导致死锁。\n如果把只能互斥使用的资源改造为允许共享使用，则系统不会进入死锁状态。比如：SPOOLIng 技术。 操作系统可以采用 SPOOLIng 技术把独占设备在逻辑上改造成共享设备。比如，用 SPOOLIng 技术将打印机改造为共享设备。。。\nSPOOLing 技术引入了一个中间进程里管理对互斥资源的访问。输出进程会把对打印机的请求排成队列，在队列里依次完成访问。使用了 SPOOLing 技术后，在各个进程看来，自己对打印机资源的使用请求立即就被接收处理了，不需要再阻塞等待。\n该策略的缺点：并不是所有的资源都可以改造成可共享使用的资源，并且为了系统安全，很多地方还必须保护这种互斥性，因此，很多时候都无法破坏互斥条件。\n（2）破坏不剥夺条件 不剥夺条件：进程所获得的资源在未使用完之前，不能由其他进程强行夺走，只能主动释放。\n破坏不剥夺条件：\n方案一：当某个进程请求新的资源得不到满足时，它必须立即释放保持的所有资源，待以后需要时 再重新申请。也就是说，即使某些资源尚未使用完，也需要主动释放，从而破坏了不可剥夺条件。\n方案二：当某个进程需要的资源被其他进程所占有的时候，可以由操作系统协助，将想要的资源强 行剥夺。这种方式一般需要考虑各进程的优先级（比如：剥夺调度方式，就是将处理机资源强行剥 夺给优先级更高的进程使用）\n该策略的缺点： 1.实现起来比较复杂。 2．释放己获得的资源可能造成前一阶段工作的失效。因此这种方法一般只适用于易保存和恢复状态的资源，如 CPU。3. 反复的申请和释放资源会增加系统开销，降低系统吞吐量。4. 若采用方案 1，意味着只要暂时得不到某个资源，之前获得的那些资源就需要放弃，以后再重新申请。如果一直发生这样的情况，就会导致金饥饿。\n（3）破坏请求和保持条件 请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源保持不放。\n可以采取静态分配方法，即进程在运行前一次申请完它所需要的全部资源，在它的资源未被满足之前，不让他投入运行。一旦投入运行后，这些资源就一直归他所有，该进程就不会再请求别的任何资源了。\n该策略实现起来简单，但也有明显的缺点：\n有些资源可能只需要用很短的时间，因此如果进程的整个运行期间都一直保持着所有资源，就会造成严重的资源浪费，资源利用率极低。另外，该策略也有可能导致某些进程饥饿。\n如：\n假设有 A 类进程，B 类进程和 C 类进程，A 类进程需要资源 1，B 类进程需要资源 2，C 类进程同时需要资源 1 和资源 2.假设此时一直有源源不断的 A 类进程或 B 类进程进入并占有资源，则 C 类进程会一直得不到需要的资源。\n（4）破坏循环等待条件 循环等待条件：存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求。\n可采用顺序资源分配法。首先给系统中的资源编号，规定每个进程必须按编号递增的顺序请求资源，同类资源（即编号相同的资源）一次申请完。\n原理分析：一个进程只有已占有小编号的资源时，才有资格申请更大编号的资源。按此规则，已持有大编号资源的进程不可能逆向地回来申请小编号的资源，从而就不会产生循环等待的现象。\n假设系统中共有 10 个资源，编号为 1，2，．．．．．10\nP1 进程占有 1 号和 3 号资源，P2 进程占有 2 号和 4 号资源，P3 进程占有 5 号和 7 号资源。在任何一个时刻，总有一个进程拥有的资源编号是最大的，那这个进程申请之后的资源必然畅通无阻。因此，不可能出现所有进程都阻塞的死锁现象。\n该策略的缺点：\n1．不方便增加新的设备，因为可能需要重新分配所有的编号：\n2．进程实际使用资源的顺序可能和编号递增顺序不一致，会导致资源浪费：\n3．必须按规定次序申请资源，用户编程麻烦。\n（5）知识回顾 3.死锁处理的策略——避免死锁 （1）什么是安全序列 你是一位成功的银行家，手里掌握着 100 个亿的资金..\n有三个企业想找你贷款，分别是企业 B、企业 A、企业 T，为描述方便，简称BAT。\nB 表示： “大哥，我最多会跟你借 70 亿..”\nA 表示： “大哥，我最多会跟你借 40 亿.\nT 表示： “大哥，我最多会跟你借 50 亿\u0026hellip;”\n然而.江湖中有个不成文的规矩：如果你借给企业的钱总数达不到企业提出的最大要求，那么不管你之前给企业借了多少钱，那些钱都拿不回来了.\n刚开始， BAT 三个企业分别从你这儿借了 20、10、30 亿\n最大需求 - 已借走 = 最多还会借\n手里还有 40 亿。此时，B 还想借 30 亿，你敢借吗？假如答应了 B 的请求\u0026hellip;\u0026hellip;\n手里还剩 10 亿。只剩下 10 亿，如果 BAT 都提出要再借 20 亿的请求，然么任何一个企业的需求都得不到满足。所以给 B 借走 30 亿的资金是不安全的\u0026hellip;\n","permalink":"http://localhost:1313/posts/notes/os/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95/","summary":"\u003ch4 id=\"1死锁的概念\"\u003e1.死锁的概念\u003c/h4\u003e\n\u003ch5 id=\"1什么是死锁\"\u003e（1）.什么是死锁\u003c/h5\u003e\n\u003cp\u003e在并发环境下，各进程因竞争资源而造成的一种\u003cstrong\u003e互相等待对方手里的资源，导致各进程都阻塞，都无法向前推进\u003c/strong\u003e的现象，就是“死锁”。发生死锁后若无外力干涉，这些进程都将无法向前推进。\u003c/p\u003e","title":"银行家算法"},{"content":"1.问题描述 桌子上有一只盘子，每次只能向其中放入一个水果，爸爸专向盘子中放水果，妈妈专向盘子中放橘子，儿子专等着吃盘子中的橘子，女儿专等着吃盘子中的苹果。只有盘子为空时，爸爸或妈妈才可向盘子中放一个水果。仅当盘子中有自己需要的水果时，儿子或女儿可以从盘子中取出水果。用 PV 操作实现上述过程。\n可以将盘子看做大小为 1，初始为空的缓冲区，爸爸和妈妈分别看做生产者进程 1 和生产者进程 2，女儿和儿子看做消费者进程 1 和消费者进程 2，\n1.关系分析：找出\n","permalink":"http://localhost:1313/posts/notes/os/%E4%BA%8C%E5%8D%81%E4%B8%89%E5%A4%9A%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/","summary":"\u003ch4 id=\"1问题描述\"\u003e1.问题描述\u003c/h4\u003e\n\u003cp\u003e桌子上有一只盘子，每次只能向其中放入一个水果，爸爸专向盘子中放水果，妈妈专向盘子中放橘子，儿子专等着吃盘子中的橘子，女儿专等着吃盘子中的苹果。只有盘子为空时，爸爸或妈妈才可向盘子中放一个水果。仅当盘子中有自己需要的水果时，儿子或女儿可以从盘子中取出水果。用 PV 操作实现上述过程。\u003c/p\u003e","title":"二十三、多生产者，消费者问题"},{"content":"1.问题描述 系统中有一组生产者进程和一组消费者进程，生产者进程每次生产一个产品放入缓冲区，消费者进程每次从缓冲区中去除一个产品并使用。（这里的“产品”理解为某种数据）\n生产者、消费者共享一个初始为空、大小为 n 的缓冲区。\n只有缓冲区没满时，生产者才能把产品放入缓冲区。\n只有缓冲区不空时，消费者才能从中取走产品，否则必须等待。\n生产者进程每次生产一个产品，消费者进程每次取走一个产品。当缓冲区为满时，只能阻塞生产者进程，切换为消费者进程取走产品。只要缓冲区中又大于或等于 1 个可用的空间时就可以唤醒生产者进程继续生产。\n当缓冲区为空，消费者进程就没有可以被取走的产品了，只能阻塞消费者进程，等待产品被放入缓冲区。\n缓冲区属于临界资源，各个进程必须互斥地访问。如果不属于临界资源，则各生产者进程并发地执行时由于无法控制执行进度，有可能导致两个进程同时访问缓冲区的同一块区域导致数据冲突。\n如何用信号量机制（P、V 操作）实现生产者、消费者进程的这些功能？\n信号量机制可以实现互斥、同步、对一类系统资源的申请和释放。\n互斥：设置初始值为 1 的互斥信号量。\n同步：设置初始值为 0 的同步信号量（实现“一前一后”）\n申请和释放资源：设置一个信号量，初始值为资源的数量（本质上也是属于“同步问题”，若无空闲资源，则申请自愿的进程需要等待别的进程释放资源后才能据需执行下去）\n分析：\n1.关系分析：找出题目中描述的各个进程，分析它们之间的同步关系。\n只有缓冲区没满时，生产者才能把产品放入缓冲区。这个属于同步关系。缓冲区没满时，生产者要等待消费者取走产品。\n只有缓冲区不空时，消费者才能从中取走产品，否则必须等待。这个也属于同步关系。缓冲区为空时（即没有产品时），消费者要等待生产者生产商品。\n只有缓冲区不空时，消费者才能从中取走产品，否则必须等待。这个属于互斥关系。\n2.整理思路，根据各进程的操作流程确定 P、V 操作的大致顺序。\n生产者每次要消耗（P）一个空闲缓冲区，并生产（V）一个产品。消费者者每次要消耗（P）一个产品，并释放一个空闲的缓冲区（V）。往缓冲区放入，取走产品需要互斥。\n3.设置信号量。设置需要的信号量，并根据题目题目条件确定信号量初值（互斥信号量初值一般为 1，同步信号量的初始值要看对应资源的初始值是多少）\nsemaphore mutex = 1; //互斥信号量，实现进程互斥访问。 semaphore empty = n; //同步信号量，表示空闲缓冲区的数量。 semaphore full = 0; //同步信号量，表示产品的数量，也即非空缓冲区的数量。 2.如何实现 根据上面设置的信号量，实现响应代码：\n//生产者进程 producer(){ while(1){ 生产一个产品; P(empty); //消耗一个空闲缓冲区 P(mutex); //实现进程互斥 把产品放入缓冲区; V(mutex); V(full); //增加一个产品 } } //消费者进程 consumer(){ while(1){ P(full); //消耗一个产品（非空缓冲区）,此P操作用于实现进程同步 P(mutex); //此P操作用于实现进程互斥 从缓冲区取走一个产品; V(mutex); V(empty); //增加一个空闲缓冲区 } } /* P(mutex); 把产品放入缓冲区; V(mutex); 上面的代码实现了进程互斥，实现互斥是在同一进程中进程一对PV操作 生产者进程的V(full)和消费者进程的P(full)用于实现两个进程的同步关系。即在其中一个一个进程中执行P，另一个进程中执行V */ 3.思考：能否改变相邻 P，V 操作的顺序？ 生产者生产产品和消费者消费产品从代码上看是放在 PV 操作之外。能不能放到 PV 操作之内呢？从逻辑上来看是没问题，可以让消费者从缓冲区中取出一个产品后就立即使用这个产品。但会导致临界区代码量变大，消费者进程在访问临界区的过程中就需要花费更多的时间，如果此时有别的进程也需要访问临界资源则消费者进程会被阻塞，会导致进程的并发度降低，尽量不要放入 PV 操作之中。\n4.知识回顾 ","permalink":"http://localhost:1313/posts/notes/os/%E4%BA%8C%E5%8D%81%E4%BA%8C%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/","summary":"\u003ch4 id=\"1问题描述\"\u003e1.问题描述\u003c/h4\u003e\n\u003cp\u003e系统中有一组生产者进程和一组消费者进程，生产者进程每次生产一个产品放入缓冲区，消费者进程每次从缓冲区中去除一个产品并使用。（这里的“产品”理解为某种数据）\u003c/p\u003e","title":"二十二、生产者消费者问题"},{"content":"1.信号量机制实现进程互斥 分析并发进程的关键活动，划定临界区（如：对临界资源打印机的访问就应放在临界区） 设置互斥信号量 mutex，初始值为 1 在临界区之前执行 P(mutex) 在临界区之后执行 V(mutex) //信号量机制实现互斥 semaphore mutex=1; //初始化信号量 P1(){ ... P(mutex); //使用临界区资源前需要加锁 临界代码区段.... V(mutex); //使用临界区资源后需要解锁 ... } P2(){ ... P(mutex); 临界代码区段.... V(mutex); ... } //原理与上节类似 注意：**对不同的临界资源需要设置不同的互斥信号量。P，V 操作必须成对出现。**缺少 P(mutex)就不能保证临界区资源的互斥访问。缺少 V(mutex)会导致资源永不被释放，等待进程永不被唤醒。\n2.信号量机制实现进程同步 进程同步：要让各并发进程按要求有序地推进\n//比如，P1、P2并发的执行，由于存在异步性，因此二者交替推进的次序是不确定的。 //若P2的“代码4”要基于P1的“代码1”和“代码2”的运行结果才能执行，那么我们就必须保证“代码4”一定是 //在“代码2”之后才会执行。 P1(){ 代码1; 代码2; 代码3; } P2(){ 代码4; 代码5; 代码6; } 用信号量实现进程同步：\n分析什么地方需要实现“同步关系”，即必须保证“一前一后”执行的两个操作（或两句代码） 设置同步信号量 S，初始值为 0。 在“前操作”之后执行 V(S)； 在“后操作”之前执行 P(S)； //信号量机制实现同步 semaphore S=0; //初始化同步信号量 P1(){ 代码1; 代码2; V(S); 代码3; } P2(){ P(S); 代码4; 代码5; 代码6; } /* 若先执行到V(S)操作，则S++后S=1.之后当执行到P(S)操作时，由于S=1，表示有可用资源，会执行S--，S的值变回0，P2的进程不会执行block原语，而是继续往下执行代码4. 若先执行到P(S)操作，由于S=0，S--后S=-1，表示此时没有可用资源，因此P操作中会执行block原语，主动请求阻塞。之后当执行完代码2，继而执行V(S)操作，S++，使S变回0由于此时有进程在该信号量对应的阻塞队列中，因此会在V操作中执行wakeup原语，唤醒P2进程。这样P2就可以继续执行代码4了。 这样就保证了代码4一定是在代码2之后执行。 */ /* 这里有一点不理解。前面说过了同步信号量S=0时表示没有可用资源，但是如果先执行了P(S)操作，同步信号量S的值会变为-1并阻塞自己，当V(S)被执行后同步信号量S的值变为0并执行wakeup操作唤醒进程P2，若按照前面的陈述那么P2也会认为此时并没有可用资源，因为同步信号量S的值为0，这样P2进程不就饿死了吗？ 不知道是不是我听漏了什么。 */ 3.信号量机制实现前驱关系 进程 P1 中有句代码 S1，P2 中有句代码 S2 一直到 P6。这些代码要求按照如下前驱图所示的顺序来执行。\n每一对前驱关系都是一个进程同步问题（需要保证一前一后的操作）\n因此：\n要为每一对前驱关系各设置一个同步变量a，b，c，d，e，f，g 在“前操作”之后对相应的同步变量执行 V 操作 在“后操作”之前对相应的同步变量执行 P 操作 P1(){ ... S1; V(a); V(B); ... } P2(){ ... P(a); S2; V(c); V(d); ... } P3(){ ... P(b); S3; V(g); ... } P4(){ ... P(c); S4; V(e); ... } P5(){ ... P(d); P(f); S5; V(f); ... } P6(){ ... P(e); P(f); P(g); S6; ... } 大概是这个样子：\n4.知识回顾 ","permalink":"http://localhost:1313/posts/notes/os/%E4%BA%8C%E5%8D%81%E4%B8%80%E7%94%A8%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%E5%90%8C%E6%AD%A5%E5%92%8C%E5%89%8D%E9%A9%B1%E5%85%B3%E7%B3%BB/","summary":"\u003ch4 id=\"1信号量机制实现进程互斥\"\u003e1.信号量机制实现进程互斥\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003e分析并发进程的关键活动，划定临界区（如：对临界资源打印机的访问就应放在临界区）\u003c/li\u003e\n\u003cli\u003e设置\u003cstrong\u003e互斥信号量 mutex，初始值为 1\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e在临界区之前执行 P(mutex)\u003c/li\u003e\n\u003cli\u003e在临界区之后执行 V(mutex)\u003c/li\u003e\n\u003c/ol\u003e","title":"二十一、用信号量机制实现进程互斥、同步和前驱关系"},{"content":"1.信号量机制 进程互斥的四种软件实现方式和进程互斥的三种硬件实现方式都存在一些问题。\n1.在双标志检查法中，进入区的“检查”、‘上锁”操作无法一气呵成，从而导致了两个进程有可能同时进入临界区的问题。\n2.所有的解决方案都无法实现“让权等待”。\n1965 年，荷兰学者迪杰斯特拉 Dijkstra 提出了一种卓有成效的实现进程互斥、同步的方法\u0026ndash;信号量机制\n用户可以通过使用操作系统提供的一对原语来对信号量进行操作，从而很方便地实现了进程互斥、进程同步。信号量其实就是一个变量（可以是一个整数，也可以是更复杂的记录型信号量），可以用一个信号量来表示系统中的某种资源的数量。\n原语是一种特殊的程序段，其执行只能一气呵成，不可被中断。原语是由关中断/开中断指令实现的，软件解决方案的主要问题是由“进入区的各种操作无法一气呵成”，因此如果能把进入区、退出区的操作都用原语实现，使这些操作能“一气呵成”就能避免问题。\n一对原语：wait（s）原语和signal（s）原语，可以把原语理解为我们自己写的函数，函数名称分别为 wait 和 signal，括号里的信号量 s其实就是函数调用时传入的一个参数。wait、signal 原语常简称为 P，V 操作（来自荷兰语 proberen 和 verhogen，意思是“尝试”和“增加”）。因此，wait（s）和 signal（s）可被简写为P（s）和 V（s）。\n2.整形信号量 用一个整数型的变量作为信号量，来表示系统中的某种资源的数量。\n如：某计算机系统中有一台打印机：\nint S = 1; //初始化整形信号量S，表示当前系统中可用的打印机资源数 void wait(int S){ //wait原语，相当于“进入区” while(s \u0026lt;= 0); //如果资源数不够，就一直循环等待 S = S - 1; //如果资源数够，就占用一个资源 } void signal(int S){ //signal原语，相当于\u0026#34;退出区\u0026#34; S = S + 1; //使用完资源后，在退出区释放资源 } //如果一个进程P0想要访问打印机，则其操作的伪代码为： ... wait(S); //进入区，申请自愿 使用的印记资源... //临界区，访问资源 signal(S); //退出区，释放资源 ... //如果进程P1在进程P0正在放问打印机时想要访问打印机资源，只能一直执行wait(S)，等待进程P0释放 //临界区资源。 ... wait(S); 访问打印机资源... signal(S); ... 信号量其与普通整数变量的区别：对信号量的操作只有三种，即 初始化、P 操作、V 操作。在 wait 原语中，“检查”和“上锁”一气呵成，避免了并发、异步导致的问题。但是如果信号量 S 为 0，则其中的 while 语句会一直检查信号量 S 的占用情况，会一直占用处理机，不满足“让权等待”原则，会发生“忙等”。\n3.记录型信号量（重要） 整形信号量的缺陷是存在“忙等”的问题，因此人们又提出了“记录型信号量”，即用记录型数据结构表示的信号量。\n//信号量的数据结构 typedef struct{ int value; //剩余资源数 struct process *L; //等待队列 } semphore; //某进程需要使用资源时，通过wait原语申请 void wait(semaphore S){ S.value--; if(S.value \u0026lt; 0){ //如果剩余资源不够，使用block原语使进程从运行态进入阻塞态，并把它挂到 block(S.L); //信号量S的等待队列（即阻塞队列）中 } } //进程使用完资源后，通过signal原语释放 void signal(semaphore S){ S.value++; if(S.value\u0026lt;=0){ //释放资源后，如果还有别的进程在等待这种资源，则使用wakeup原语唤醒 wakeup(S.L); //等待队列中的一个进程，使该进程从阻塞态变为就绪态。 } } 例：某计算机系统中有两台打印机，则可在初始化信号量 S 时将 S.value 的值设为 2，队列 S.L 设置为空\ntypedef struct{ int value; //剩余资源数为2 struct process *L; //等待队列-→null } //P0进程 ... wait(S); 使用打印机... signal(S); ... //P1进程 ... wait(S); 使用打印机... signal(S); ... //P2进程 ... wait(S); 使用打印机.. signal(S); ... //P3进程 ... wait(S); 使用打印机... signal(S); ... /* 解释：有点啰嗦，能看得懂就行。 cpu首先为p0服务，P0使用wait原语检查剩余资源，系统中剩余打印机资源为2，可以分配给P0，value值减1变为1，P0可以使用打印机。之后cpu又为p1服务，P1使用wait原语检查剩余资源，系统中剩余打印机资源为1，value值减1变为0，可以分配给P1，P1可以使用打印机。再次cpu为P2服务，P2使用wait原语检查剩余打印机资源，系统中剩余打印机资源为0，资源已经暂时全部被占用，value值减1变为-1小于0，P2进程主动执行block原语，P2被挂载到了打印机的等待队列中，P3同理，value值变为-2. value值为0时资源刚好被分配完，为-1时有一个进程在等待，为-2时有两个进程在等待。 当P0使用完成后，会执行signal原语释放打印机，value值加一变为-1，但此时value的值为-1仍然小于0，就说明此时等待队列中不止一个进程在等待打印机资源，进程P0会主动执行wakeup原语唤醒队列中的队头进程P2，P2从阻塞队列中被切换到就绪队列。待P2进程切换至运行态时，就可占用P0释放的打印机资源了。其余后续步骤同理。 */ wait(S)和 signal(S)也可记为 P(S)，V(S)，这对原语用于实现系统资源的申请和释放。\nS.value 的初始值表示系统中某种资源的数目。\n对信号量 S 的一次 P 操作意味着进程请求一个单位的该类资源，因此需要执行 S.balue\u0026ndash;，表示资源数减 1，当 S.value\u0026lt;0 时表示该类资源已分配完毕，因此进程应调用 block 原语进行自我阻塞（当前运行的进程从运行态切换为阻塞态），主动放弃处理机，并插入该类资源的等待队列 S.L 中。可见，该机制遵循了“让权等待的原则”，不会出现“忙等”的现象。\n对信号量 S 的一次 V 操作意味着进程释放一个单位的该类资源，因此需要执行 S.value++，表示资源数+1，若加一后仍是 S.value\u0026lt;=0，表示依然有进程在等待该类资源，因此应调用 wakeup 原语唤醒等待队列中的第一个进程（被唤醒的进程从阻塞态切换为就绪态）。\n4.知识回顾 ","permalink":"http://localhost:1313/posts/notes/os/%E4%BA%8C%E5%8D%81%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/","summary":"\u003ch4 id=\"1信号量机制\"\u003e1.信号量机制\u003c/h4\u003e\n\u003cp\u003e进程互斥的四种软件实现方式和进程互斥的三种硬件实现方式都存在一些问题。\u003c/p\u003e\n\u003cp\u003e1.在双标志检查法中，\u003cstrong\u003e进入区的“检查”、‘上锁”操作无法一气呵成\u003c/strong\u003e，从而导致了两个进程有可能同时进入临界区的问题。\u003c/p\u003e\n\u003cp\u003e2.所有的解决方案都\u003cstrong\u003e无法实现“让权等待”\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e1965 年，荷兰学者迪杰斯特拉 Dijkstra 提出了一种卓有成效的实现进程互斥、同步的方法\u0026ndash;\u003cstrong\u003e信号量机制\u003c/strong\u003e\u003c/p\u003e","title":"二十、信号量机制"},{"content":"这里什么都没写，先占个坑以后再写。\n","permalink":"http://localhost:1313/posts/notes/os/%E5%8D%81%E4%B9%9D%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%E7%9A%84%E7%A1%AC%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/","summary":"\u003cp\u003e这里什么都没写，先占个坑以后再写。\u003c/p\u003e","title":"十九、进程互斥的硬件实现方法"},{"content":"1.单标志法 算法思想：两个进程在访问完临界区后会把使用临界区的权限转交给另一个进程。也就是说每个进程进入临界区的权限只能被另一个进程赋予。\nint turn = 0; //turn表示当前允许进入临界区的进程号 P0 进程：\nwhile(turn != 0); ①//进入区 critical section; ②//临界区 turn = 1; ③//退出区 remainder section; ④//剩余区 P1 进程：\nwhile(turn != 1); ⑤ critical section; ⑥ turn = 1; ⑦ remainder section; ⑧ turn 的初始值为 0，即刚开始只允许 0 号进程进入临界区。若 P1 先上处理机运行，则会一直卡在 ⑤。直到 P1 的时间片用完，发生调度，切换 P0 上处理机运行。\n代码 ① 不会卡住 P0，P0 可以正常访问临界区，在 P0 访问临界区期间即时切换回 P1，由于 turn 的初始值未改变，P1 依然会卡在 ⑤。只有 P0 在退出区将 turn 改为 1 后，P1 才能进入临界区。\n因此，该算法可以实现“同一时刻最多只允许一个进程访问临界区”。\nturn 表示当前允许进入临界区的进程号，而只有当前允许进入临界区的进程在访问了临界区之后，才会修改 turn 的值。也就是说，对于临界区的访问，一定是按照 P0→P1→P0→P1→\u0026hellip;\u0026hellip;这样轮流访问。这种必须“轮流访问”带来的问题是，如果此时允许进入临界区的进程是 P0，而 P0 一直不访问临界区，那么虽然此时临界区空闲，但是并不允许 P1 访问。\n因此，单标志法存在的主要问题是：违背“空闲让进”原则。\n2.双标志先检查法 算法思想：设置一个布尔型数组 flag[]，数组中的各个元素用来标记各进程想进入临界区的意愿，比如“flag[0]=true”意味着 0 号进程 P0 现在想要进入临界区。每个进程在进入临界区之前检查当前有没有别的进程想进入临界区，如果没有，则把自身对应的标志 flah[i]设置为 ture，之后开始访问临界区。\nbool flag[2]; //表示进入临界区意愿的数组 flag[0] = false; flag[1] = false; //刚开始设置为两个进程不想进入临界区 P0 进程：\nwhile(flag[1]); ① flag[0] = ture; ② critical section; ③ flag[0] = false; ④ remainder section; P1 进程：\nwhile(flag[0]); ⑤ //如果此时P0想进入临界区，P1就一直循环等待 flag[1] = true; ⑥ //标记为P1进程想要进入临界区 critical section; ⑦ //访问临界区 flag[1] = false; ⑧ //访问完临界区，修改标记为P1不想使用临界区 remainder section; 若按照 1,5,2,6,3,7 的顺序执行，P0 和 P1 将会同时访问临界区。因此，双标志检查法的主要问题是：**违反“忙则等待”原则。**原因在于，进入区的“检查”和“上锁”两个处理不是一气呵成的，“检查”后，“上锁”前可能发生进程切换。\n3.双标志后检查法 算法思想：双标志检查法的改版。前一个算法的问题是先“检查”后“上锁”，但是这两个操作又无法一气呵成，因此导致了两个进程同时进入临界区的问题。因此，人们又想到先“上锁”后“检查”的方法，来避免上述问题。\nbool flag[2]; //表示进入临界区意愿的始祖 flag[0] = false; flag[1] = false; //刚开始设置为两个进程不想进入临界区 P0 进程：\nflag[0] = ture; ① while(flag[1]); ② critical section; ③ flag[0] = false; ④ remainder section; P1 进程：\nflag[1] = true; ⑤ //如果此时P0想进入临界区，P1就一直循环等待 while(flag[0]); ⑥ //标记为P1进程想要进入临界区 critical section; ⑦ //访问临界区 flag[1] = false; ⑧ //访问完临界区，修改标记为P1不想使用临界区 remainder section; 若按照 1,5,2,6\u0026hellip;.的顺序执行，P0 和 P1 将都无法访问临界区。因此，双标志后检查法虽然解决了“忙则等待”的问题的问题，但是又违背了“空闲让进”和“有限等待”原则，会因各进程都长期无法访问临界区而**产生“饥饿”**现象。\n4.皮特森（Peterson）算法 算法思想：双标志后检查法中，两个进程都想争着进入临界区，但是谁也谁，最后谁都无法进入临界区。Gary L.Peterson 想到了一种方法，如果双方都争着想要进入临界区，那可以让进程尝试“孔融让梨”，主动让对方使用临界区。\nbool flag[2]; //表示进入临界区意愿的数组，初始都是false int turn = 0; //turn表示优先让那个进程进入临界区 P0 进程：\nflag[0] = ture; ① turn = 1; ② while(flag[1] \u0026amp;\u0026amp; turn == 1); ③ critical section; ④ flag[0] = false; ⑤ remainder section; P2 进程：\nflag[1] = ture; ⑥ //表示自己想进入临界区 turn = 0; ⑦ //可以优先让对方进入临界区 while(flag[0] \u0026amp;\u0026amp; turn == 0); ⑧ //对方想进，且最后一次是自己“让梨”，拿自己就循环等待 critical section; ⑨ flag[1] = false; ⑩ //访问完临界区，表示自己已经不想访问临界区了 remainder section; 两种双标志检查法的问题都是由于进入区的几个操作不能一气呵成导致的。我们可以推理验证在 Peterson 算法中，两个进程进入区中的各个操作按不同顺序穿插执行会发生什么情况。\n进入区：\n① 主动争取 ② 主动谦让 ③ 检查对方是否也想使用，且最后一次是不是自己说了“客气话” 皮特森算法是用软件方法解决了进程互斥的问题，遵循了空闲让进，忙则等待，有限等待三个原则，但是依然未遵循让权等待的原则。\n","permalink":"http://localhost:1313/posts/notes/os/%E5%8D%81%E5%85%AB%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/","summary":"\u003ch4 id=\"1单标志法\"\u003e1.单标志法\u003c/h4\u003e\n\u003cp\u003e算法思想：两个进程在\u003cstrong\u003e访问完临界区后\u003c/strong\u003e会把使用临界区的权限转交给另一个进程。也就是说\u003cstrong\u003e每个进程进入临界区的权限只能被另一个进程赋予。\u003c/strong\u003e\u003c/p\u003e","title":"十八、进程互斥的软件实现方法"},{"content":"1.什么是进程同步 回顾：进程具有异步性的特征。异步性是指：各自并发执行的进程以各自独立的、不可预知的速度向前推进。\n例子：进程通信 \u0026mdash;- 管道通信\n写进程往管道里写数据，读进程再从管道里读数据。读进程和写进程并发地运行，由于并发必然导致异步性，因此“写数据”和“读数据”两个操作执行的先后顺序是不确定的。而实际应用中，又必须按照**“写数据 → 读数据”的顺序来执行，如何解决这种一部问题，就是进程同步**所讨论的内容。\n同步又称直接制约关系，它是指为完成某种任务而建立的两个或多个进程。这些进程因为需要在某些位置上协调他们的工作次序而产生的制约关系。进程间的直接制约关系就是源于它们之间的相互合作。操作系统需要提供一种**“进程同步机制”**来实现进程的同步执行需求。\n2.什么是进程互斥 进程的“并发”需要“共享”的支持。各个并发执行的进程不可避免的需要共享一些系统资源（如内存，打印机和摄像头等 I/O 设备）\n两种资源的共享方式\n互斥共享方式：系统中的某些资源可以提供给多个进程使用，但一个时间段内只允许一个进程访问资源。 同时共享方式：系统中的某些资源，允许一个时间段内有多个进程“同时”对它们进行访问。 我们把一个时间段内只允许一个进程使用的资源称为临界资源，许多物理设备（如打印机，摄像头）都属于临界资源。此外还有许多变量、数据、内存缓冲区等都属于临界资源。\n对临界资源的访问，必须互斥地进行。互斥，亦称间接制约关系。进程互斥指当一个进程访问某临界资源时，另一个想要访问该临界资源的进程必须等待。当访问临界资源的进程结束访问，释放该资源之后，另一个进程才能去访问临界资源。\n对临界资源的互斥访问，可以在逻辑上分为如下四个部分：进入区，临界区，退出区和剩余区。\ndo{ /* * 进入区，负责检查是否可进入临界区，若可以进入，则应设置 正在访问临界资源 的标志（可理 * 解为“上锁”），以阻止其他进程同时进入临界区。 */ entry section; /* * 临界区，访问临界资源的那段代码 */ circtical section; /* * 退出区，负责解除 正在访问临界资源 的标志（可理解为“解锁”） */ exit section; /* * 剩余区，作其他处理 */ remainder section; }while(true) /* * 注意：临界区是进程中访问临界资源的那段代码。进入区和退出去是负责实现互斥的代码段。临界 * 区亦可成为“临界段” */ 如果一个进程暂时不能进入临界区，那么该进程是否应该一直占着处理机？该进程有没有可能一直进不了临界区？\n为了实现对临界资源的互斥访问，同时保证系统整体性能，需要遵循以下原则：\n空闲让进：临界区空闲时，可以允许一个请求进入临界区的进程立即进入临界区； 忙则等待：当已有进程进入临界区时，其他视图进入临界区的进程必须等待。 有限等待：对请求访问的进程，应当保证在有限的时间内进入临界区（保证不会饥饿） 让权等待：当进程不能进入临界区时，应立即释放处理机，防止进程忙等待（连续等待进入临界区占用大量处理机资源）。 3.知识回顾 ","permalink":"http://localhost:1313/posts/notes/os/%E5%8D%81%E4%B8%83%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E5%92%8C%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5/","summary":"\u003ch4 id=\"1什么是进程同步\"\u003e1.什么是进程同步\u003c/h4\u003e\n\u003cp\u003e回顾：进程具有\u003cstrong\u003e异步性\u003c/strong\u003e的特征。异步性是指：各自并发执行的进程以各自独立的、不可预知的速度向前推进。\u003c/p\u003e\n\u003cp\u003e例子：进程通信 \u0026mdash;- 管道通信\u003c/p\u003e\n\u003cp\u003e写进程往管道里写数据，读进程再从管道里读数据。读进程和写进程并发地运行，由于并发必然导致异步性，因此“写数据”和“读数据”两个操作执行的先后顺序是不确定的。而实际应用中，又必须按照**“写数据 → 读数据”\u003cstrong\u003e的顺序来执行，如何解决这种一部问题，就是\u003c/strong\u003e进程同步**所讨论的内容。\u003c/p\u003e","title":"十七、进程同步和进程互斥"},{"content":"1.时间片轮转（RR，Round-Robin） RR 算法思想：公平地、轮流地为每个进程服务，让每个进程在一定时间间隔内都可以得到响应\n算法规则：按照各进程到达就绪队列的顺序，轮流让各个进程执行一个时间片。若进程未在一个时间片内执行完，则剥夺处理机，将进程重新放回就绪队列尾重新排队。\n用于作业/进程调度：用于进程调度（只有作业放入内存建立了相应的进程后，才能被分配处理及时间片）\n是否可抢占？：若进程未在一个时间片内执行完，将被剥夺处理机使用权，因此时间片轮转调度算法属于抢占式的算法。由时钟装置发出时钟中断来通知 CPU 时间片已到。\n优缺点：\n优点：公平；响应快，适用于分时操作系统 缺点：由于高频率的进程切换，因此有一定的开销；不区分任务的紧急程度。 是否会导致饥饿：不会\n补充：时间片太大或太小会有什么影响？\n例题：例题：各进程到达就绪队列的时间、需要的时间如下表所示，使用时间片轮转调度算法，分析时间片大小分别是 2、5 时的运行情况。\n时间片大小为 2 时的情况：\n时间片大小为 5 时的情况：\n注：时间片轮转算法常用于分时操作系统，更注重“响应时间”，因而此处不计算周转时间。对比发现，时间片轮转算法在时间片大小为 5 时和上一篇文章中的“先来先服务算法”调度结果类似。如果时间片太大，导致每个进程都能在一个时间片内完成，那么时间片轮转算法就会退化为先来先服务算法，并且会增大进程响应时间。因此时间片不能太大。另外方面，进程切换是有时间代价的（保存，恢复运行环境），因此如果时间片太小，会导致进程切换过于频繁，系统会花大量的时间来处理进程切换，从而导致实际用于进程执行的时间比例减少。可见时间片也不能太小。一般来说，设计时间片时要让切换进程的开销比例不超过 1%。\n2.优先级调度算法 优先级调度算法 算法思想：随着计算机的发展，特别是实时操作系统的出现，越来越多的应用场景需要根据任务的紧急程度来决定处理顺序。\n算法规则：每个作业/进程有各自的优先级，调度时选择优先级最高的作业/进程。\n用于作业/进程调度：既可用于作业调度，也可用于进程调度。甚至还会用于 I/O 调度中。\n是否可抢占？：抢占式、非抢占式都有。非抢占式只需在进程主动放弃处级机时进行调度即可，而非抢占式还需在就绪队列变化时，检查是否会发生抢占。\n优缺点：\n优点：用优先级区分任务的紧急程度、重要程度，适用于实时操作系统。可灵活的调整对各种作业/进程的偏好程度。 缺点：若源源不断地有高优先级进程到来，则可能导致饥饿 是否会导致饥饿：会\n例题：各进程到达就绪队列的时间、需要的时间如下表所示，使用非抢占式和抢占式的优先级调度算法，分析进程的运行情况。（注：优先数越大优先级越高）\n非抢占式：\n抢占式：\n注：就绪队列未必只有一个，可以按照不同的优先级组织。另外，可以吧优先级高的进程排在更靠近对头的位置。根据优先级是否可以动态地改变，可将优先级分为静态优先级和动态优先级两种。\n静态优先级：创建进程时确定，之后一直不变。\n动态优先级：创建进程时有一个初始值，之后会根据情况动态地调整优先级。\n如何和合理设置各类进程的优先级？通常，系统进程优先级高于用户进程；前台进程优先级高于后台进程；操作系统更偏好 I/O 进程（或称 I/O 繁忙型进程）。I/O 设备可以和 CPU 并行工作。如果优先让 I/O 繁忙型进程优先运行的话，则越有可能让 I/O 设备尽早地投入工作，则资源利用率、系统吞吐量都会得到提升。与 I/O 型进程相对的是计算型进程（或称 CPU 繁忙型进程）。\n如果采用的是动态优先级，什么时候应该调整？可以从追求公平，提升资源利用率等角度考虑。如果某进程在就绪队列中等待了很长时间，则可以适当的提升其优先级。如果某进程占用处理机运行了很长时间，则可以适当地降低其优先级。如果发现一个进程频繁的进行 I/O 操作，则可以适当的提升其优先级。\n3.思考\u0026hellip;\u0026hellip;.. FCFS 算法的优点是公平；\nSJF 算法的有点是能尽快处理完短作业，平均等待/周转时间等参数很优秀；\n书记安片轮转调度算法可以让各个进程得到及时的响应；\n优先级调度算法可以灵活地调整各种进程被服务的机会；能否对其他算法做个折中权衡，得到一个综合表现优秀平衡的算法呢？\n缝合怪登场！↓↓↓↓↓↓↓↓↓↓↓↓\n4.多级反馈队列调度算法 多级反馈队列 算法思想：对比其他调度算法的折中权衡。\n算法规则：1. 设置多级就绪队列，各级队列优先级从高到低，时间片从小到大；2.新进程到达时先进入第 1 级队列，按 FCFS 原则排队等待被分配时间片，若用完时间片进程还未结束，则进程进入下一级队列队尾，如果此时已经是在最下级的队列，则重新放入该队列队尾；3.只有第 K 级队列为空时，才会为 k+1 级队头的进程分配时间片\n用于作业/进程调度：用于进程调度\n是否可抢占？：抢占式算法。在 k 级队列的进程运行过程中，若更上级的队列（1~k-1 级）中进入了一个新进程，则由于新进程处于优先级更高的队列中，因此新进程会抢占处理机，原来运行的进程放回 k 级队列队尾。\n优缺点：\n优点：对各类进程相对公平（FCFS 优点）；每个新到达的进程都可以很快就得到响应（RR 优点）；短进程只用较少的时间就可完成（SPF 优点）；不必实现估计进程的运行时间（避免用户作假）；可以灵活地调整对各类进程的偏好程度，比如 CPU 密集型进程、I/O 密集型进程（拓展：可以将因 I/O 而阻塞的进程重新放回原队尾，这样 I/O 型进程就可保持较高优先级） 是否会导致饥饿：会\n例题：各进程到达就绪队列的时间、需要的时间如下表所示，使用多级反馈队列调度算法，分析进程的运行情况。\n视频被投诉下架了,可以自己去 b 站搜一下\u0026quot;王道操作系统\u0026quot;\n5.知识回顾 注：比起早期的批处理操作系统来说，由于计算机造价大幅度降低，因此之后出现的交互式操作系统（包括分时操作系统，实时操作系统等）更注重系统的响应时间、公平性、平衡性等指标。而这几种算法也恰好能较好地满足交互式系统的需求。因此这三种算法更适用于交互式操作系统。（比如 UNIX 使用的就是多级反馈队列调度算法）\n","permalink":"http://localhost:1313/posts/notes/os/%E5%8D%81%E5%85%AD%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%952/","summary":"\u003ch4 id=\"1时间片轮转rrround-robin\"\u003e1.时间片轮转（RR，Round-Robin）\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003ch5 id=\"rr\"\u003eRR\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e算法思想：公平地、轮流地为每个进程服务，让每个进程在一定时间间隔内都可以得到响应\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e算法规则：按照各进程到达就绪队列的顺序，轮流让各个进程执行一个\u003cstrong\u003e时间片\u003c/strong\u003e。若进程未在一个时间片内执行完，则剥夺处理机，将进程重新放回就绪队列尾重新排队。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e用于作业/进程调度：用于进程调度（只有作业放入内存建立了相应的进程后，才能被分配处理及时间片）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e是否可抢占？：若进程未在一个时间片内执行完，将被剥夺处理机使用权，因此时间片轮转调度算法属于\u003cstrong\u003e抢占式\u003c/strong\u003e的算法。由时钟装置发出\u003cstrong\u003e时钟中断\u003c/strong\u003e来通知 CPU 时间片已到。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e优缺点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e优点：公平；响应快，适用于分时操作系统\u003c/li\u003e\n\u003cli\u003e缺点：由于高频率的进程切换，因此有一定的开销；不区分任务的紧急程度。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e是否会导致饥饿：不会\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e补充：时间片太大或太小会有什么影响？\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e","title":"十六、调度算法（2）"},{"content":"1.先来先服务（FCFS，First Come Firse Serve） FCFS 算法思想：主要从“公平”的角度考虑（类似于生活中排队买东西）\n算法规则：按照作业/进程到达的先后顺序进行服务\n用于作业/进程调度：用于作业调度时，考虑的是哪个作业先到达后备队列；用于进程调度时，考虑的是那个进程先到达就绪队列\n是否可抢占？ 非抢占式的算法\n优缺点：\n优点：公平、算法实现简单 缺点：排在长作业（进程）后面的短作业需要等待很长时间，带权周转时间很大，对作业来说用户体验不好。即：FCFS 算法对长作业有利，对短作业不利（EG:排队买奶茶） 是否会导致饥饿（某进程，作业长期得不到服务）：不会（只要进程或作业一直等着总会得到服务）\n例题：各进程到达就绪队列的时间、需要的时间如下表所示，使用先来先服务调度算法，计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、平均带权周转时间。 周转时间 = 完成时间 - 到达时间\nP1 = 7 - 0 = 7 P2 = 11 - 2 = 9 P3 = 12 - 4 = 8 P4 = 16 - 5 = 11 带权周转时间 = 周转时间 / 运行时间\nP1 = 7 / 7 = 1 P2 = 9 / 4 = 2.25 P3 = 8 / 1 = 8 P4 = 11 / 4 = 2.75 等待时间 = 周转时间 - 运行时间\nP1 = 7 - 7 = 0 P2 = 9 - 7 = 2 P3 = 8 - 1 = 8 P4 = 11 - 4 = 7 平均周转时间\n（7 + 9 + 8 + 11）/ 4 = 8.75 平均带权周转时间\n（1 + 2.25 + 8 + 2.75）/ 4 = 3.5\n平均等待时间\n（0 + 5 + 7 + 7）/ 4 = 4.75 注：例题中的进程都是纯计算形的进程，一个进程到达后要么在等待，要么在运行。如果是有计算，又有 I/O 操作的进程，其等待时间就是周转时间 - 运行时间 - I/O 操作的时间。对于 P3 进程来说，其带权周转时间的权值为 8，是非常大的权值。带权周转时间表示的是这个进程的运行时间比其等待时间大多少倍的指标。带权周转时间这么大代表这个进程只需要很少的时间就可运行完成但其等待时间又很长，对于 P3 的用户来说体验是很糟糕的。\n2.短作业优先（SJF，Shortest Job First） SJF 算法思想：追求最少的平均等待时间，最少的平均周转时间，最少的平均平均带权周转时间\n算法规则：最短作业/进程得到优先服务（所谓“最短”，是指要求服务时间最短）\n用于短作业.进程调度：既可用于作业调度，也可用于进程调度。用于进程调度时成为“短进程优先（SPF，Shortest Process First）”\n是否可抢占？：SJF 和 SPF 是非抢占式算法，但是也有抢占式的版本——最短剩余时间优先算法（SRTF，Shortest Remaining Time Next）\n优缺点：\n优点：“最短的”平均等待时间，平均周转时间 缺点：不公平。对短作业有利，对长作业不利。可能产生饥饿现象。另外，作业/进程的运行时间是由用户提供的，不一定真实，不一定能做到真正的短作业优先。 是否会导致饥饿：会。如果有源源不断的短作业/进程进来，可能会使长作业/进程长时间得不到服务，产生**“饥饿”现象。如果一直得不到服务，则成为\u0026ldquo;饿死\u0026rdquo;**。\n例题 1：各进程到达就绪队列的时间、需要的时间如下表所示，使用非抢占式的短作业优先调度算法，计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、平均带权周转时间。 周转时间 = 完成时间 - 到达时间\nP1 = 7 - 0 = 7 P3 = 8 - 4 = 4 P2 = 12 - 2 = 10 P4 = 16 - 5 = 11 带权周转时间 = 周转时间 / 运行时间\nP1 = 7 / 7 = 1 P3 = 4 / 1 = 4 P2 = 10 / 4 = 2.5 P4 = 11 / 4 = 2.75 等待时间 = 周转时间 - 运行时间\nP1 = 7 - 7 = 0 P3 = 4 - 1 = 3 P2 = 10 - 4 = 6 P4 = 11 - 5 = 6 平均周转时间\n（7 + 4 + 10 + 11）/ 4 = 8 平均带权周转时间\n（1 + 4 + 2.5 + 2.75）/ 4 = 2.56\n平均等待时间\n（0 + 3 + 6 + 7）/ 4 = 4 注：严格来说，题目中用于进程调度应该被成为**“短进程优先调度算法（SPF）”**。对比 FCFS 算法的平均等待/周转/带权周转时间都要更低。\n例题 2：各进程到达就绪队列的时间、需要的时间如下表所示，使用抢占式的短作业优先调度算法，计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、平均带权周转时间。 周转时间 = 完成时间 - 到达时间\nP1 = 16 - 0 = 16 P2 = 7 - 2 = 5 P3 = 5 - 4 = 1 P4 = 11 - 5 = 6 带权周转时间 = 周转时间 / 运行时间\nP1 = 16 / 7 = 2.28 P2 = 5 / 4 = 1.25 P3 = 1 / 1 = 1 P4 = 6 / 4 = 1.5 等待时间 = 周转时间 - 运行时间\nP1 = 16 - 7 = 9 P2 = 5 - 4 = 1 P3 = 1 - 1 = 0 P4 = 6 - 4 = 2 平均周转时间\n（16 + 5 + 1 + 6）/ 4 = 7 平均带权周转时间\n（2.28 + 1.25 + 1 + 1.5）/ 4 = 1.50\n平均等待时间\n（9 + 1 + 0 + 2）/ 4 = 3 注：对比非抢占式的短作业优先算法，显然抢占式的这几个指标又要更低。\n注意几个小细节：\n如果题目中未特别说明，所提到的“短作业/短进程优先算法”默认是非抢占式的 很多书上都会说“SJF 调度算法的平均等待时间、平均周转时间最少” 严格来说这句话时错误的，不严谨的。之前的例子表明，最短剩余时间优先算法得到的平均等待时间、平均周转时间还要更少。应该加上一个条件“在所有进程同时可运行时，采用 SJF 算法的平均等待时间、平均周转时间最少。”；如果不加上上述前提条件，则应该说“抢占式的短作业/短进程优先调度算法（最短剩余时间优先，SRTF算法）的平均等待时间，平均周转时间最少”\n穗盐染个来说 SJF 的平均等待时间，平均周转时间并不一定最少，但是相比于其他算法（如 FCFS），SJF 依然可以获得较少的平均等待时间、平均周转时间 如果选择题中遇到“SJF 算法的平均等待时间，平均周转时间最少”的选项，那最好判断其它选项是不是有很明显的错误，如果没有合适的选项，那应该选择该项。 3.高响应比优先算法（HRRN，Highest Response Ratio Next） 对 FCFS 和 SJF 两种算法的思考 FCFS 算法是在每次调度的时候选择一个等待时间最长的作业（进程）为其服务。但是没有考虑到作业的运行时间，因此导致了对短作业不友好的问题。\nSJF 算法是选择一个执行时间最短的作业为其服务。但是又完全不考虑各个作业的等待时间，因此导致了对长作业不友好的问题，甚至还会造成界问题\n能不能设计一个算法，既考虑到各个作业的等待时间，也能兼顾运行时间呢？\n高响应比优先算法\n（老折中了）\nHRRN 算法思想：要综合考虑作业/进程的等待时间和要求服务时间\n算法规则：在每次调度时先计算各个作业/进程的响应比，选择响应比最高的作业/进程为其服务。\n$响应比=\\frac{等待时间+要求服务时间}{要求服务时间}$，在这里响应比肯定是会\u0026gt;=1 的\n用于作业/进程调度：既可用于作业调度，也可用于进程调度\n是否可抢占？：非抢占式的算法，因此只有当前运行的作业/进程主动放弃处理及时，才需要调度，才需要计算响应比\n优缺点：\n优点：综合考虑了等待时间和运行时间（要求服务时间）。等待时间相同时，要求服务时间短的优先（SJF 的优点）。要求服务时间相同时，等待时间长的优先（FCFS 的优点）。对于长作业来说，随着等待时间越来越久，其相应比也会越来越大，从而避免了长作业饥饿的问题\n是否会导致饥饿：不会\n例题：各进程到达就绪队列的时间、需要的时间如下表所示，使用高响应比优先调度算法，计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、平均带权周转时间。 上面那里有个错的，(3 + 1) / 1 = 4，不是等于 3😅\n4.知识回顾 注：这几种算法主要关心对用户的公平性、平均周转时间、平均等待时间等评价系统整体性能指标，但是不关心“响应时间”。也不区分任务的紧急程度，因此对于用户来说，交互性很糟糕。因此这三种算法一般是用于早期的批处理系统。当然，FCFS 也常结合其他的算法使用，在现在也扮演着很重要的角色。\n","permalink":"http://localhost:1313/posts/notes/os/%E5%8D%81%E4%BA%94%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/","summary":"\u003ch4 id=\"1先来先服务fcfsfirst-come-firse-serve\"\u003e1.先来先服务（FCFS，First Come Firse Serve）\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003ch5 id=\"fcfs\"\u003eFCFS\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e算法思想：主要从“公平”的角度考虑（类似于生活中排队买东西）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e算法规则：按照作业/进程到达的先后顺序进行服务\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e用于作业/进程调度：用于作业调度时，考虑的是哪个作业先到达后备队列；用于进程调度时，考虑的是那个进程先到达就绪队列\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e是否可抢占？ 非抢占式的算法\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e优缺点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e优点：公平、算法实现简单\u003c/li\u003e\n\u003cli\u003e缺点：排在长作业（进程）后面的短作业需要等待很长时间，带权周转时间很大，对作业来说用户体验不好。即：FCFS 算法\u003cstrong\u003e对长作业有利，对短作业不利\u003c/strong\u003e（EG:排队买奶茶）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e是否会导致\u003cstrong\u003e饥饿\u003c/strong\u003e（某进程，作业长期得不到服务）：不会（只要进程或作业一直等着总会得到服务）\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e","title":"十五、调度算法"},{"content":"1.CPU 利用率 由于早期的 CPU 造价极其昂贵，因此人们希望让 CPU 尽可能多地工作\n**CPU 利用率：**指 CPU“忙碌”的时间占总时间的比例\n$利用率=\\frac{忙碌的时间}{总时间}$\n有的题目还会要求计算某种设备的利用率：\n如：某计算机只支持单道程序，某个作业刚开始需要在 CPU 上运行 5 秒，再用打印机打印输出 5 秒，之后再执行 5 秒，才能结束。在此过程中，COPU 利用率、打印机利用率分别是多少？\n$CPU利用率=\\frac{5+5}{5+5+5}=66.665$ $打印机利用率=\\frac{5}{15}=33.335$\n2.系统吞吐量 对于计算机来说，希望使用尽可能少的时间完成尽可能多的多页\n**系统吞吐量：**单位时间内完成的作业数量\n$系统吞吐量=\\frac{总共完成了多少道作业}{总共花了多少时间}$\n如：某计算机处理完成 10 道作业，共花费 100 秒，则系统吞吐量为：\n$\\frac{10}{100}=0.1（道/秒）$\n即平均每秒可以完成 0.1 道作业。\n3.周转时间 对于计算机用户来说，他很关心自己的作业从提交道完成花费了多少时间。\n周转时间：是指作业被提交给系统开始，到作业完成为止的这段时间间隔。\n它包括四个部分：作业在外存后备队列上等待作业调度（高级调度）的时间、进程在就绪队列上等待进程调度（低级调度）的时间、进程在 CPU 上执行的时间、进程等待 I/O 操作完成的时间。后三项在一个作业的整个处理过程中，可能发生多次。\n对于用户来说，更关心自己的单个作业的周转时间： （作业）周转时间 = 作业完成时间 - 作业提交时间\n对于操作系统来说，更关心系统的整体表现，因此更关心所有作业周转时间的平均值。 $平均周转时间=\\frac{各作业周转时间之和}{作业数}$\n有的作业运行时间长，有的作业运行时间短，因此在周转时间相同的情况下，运行时间不同的作业，给用户的感受肯定是不一样的。 $戴荃周转时间=\\frac{作业周转时间}{作业实际运行的时间}=\\frac{作业完成时间-作业提交时间}{作业实际运行的时间}$\n$平均带权周转时间=\\frac{各作业带权周转时间之和}{作业数}$\n带权周转时间必然\u0026gt;=1 带权周转时间与周转时间都是越小越好\n对于周转时间相同的两个作业，实际运行时间长的作业在相同的时间内被服务的时间更过，带权周转时间更小，用户满意度更高。\n对与实际运行时间相同的两个作业，周转时间短的带权周转时间更小，用户满意度更高。\n4.等待时间 计算机的用户希望自己的作业尽可能少的等待处理剂\n等待时间：指进程/作业处于等待处理机状态时间之和，等待时间越长用户满意度越低。\n当一个作业被建立之后，作业会被放在外存的“作业后备队列”等待被服务（调度）。当作业被服务之后作业会被调入内存。作业被调入内存后，建立对应的进程，这个进程会被 CPU 服务，会被 I/O 设备服务，当然也会有等待被服务的时候。\n对于进程来说，等待时间就是指进程建立后等待被服务的时间之和，在等待 I/O 完成的期间其实进程也是在被服务的，所以不计入等待时间。 对于作业来说，不仅要考虑建立进城后的等待时间，还要加上作业在外存后备队列中等待的时间。\n一个作业总共需要被 CPU 服务多久，被 I.O 设备服务多久一般是确定不变的，因此调度算法其实只会影响作业/进程的等待时间。当然，与前面指标类似，也有**“平均等待时间”**来评价整体性能。\n$平均等待时间=\\frac{所有进程/作业的等待时间之和}{作业数量}$\n5.响应时间 对于计算机用户来说，会希望自己的提交的请求（比如通过键盘输入了一个调试命令）尽早地开始被系统服务、回应。\n响应时间:是指用户提交请求到首次产生响应所用时间。\n6.知识回顾 ","permalink":"http://localhost:1313/posts/notes/os/%E5%8D%81%E5%9B%9B%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/","summary":"\u003ch4 id=\"1cpu-利用率\"\u003e1.CPU 利用率\u003c/h4\u003e\n\u003cp\u003e由于早期的 CPU 造价极其昂贵，因此人们\u003cstrong\u003e希望让 CPU 尽可能多地工作\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e**CPU 利用率：**指 CPU“忙碌”的时间占总时间的比例\u003c/p\u003e\n\u003cp\u003e$利用率=\\frac{忙碌的时间}{总时间}$\u003c/p\u003e","title":"十四、调度算法的评价指标"},{"content":"1.进程调度的时机 进程调度（低级调度），就是按照某种算法从就绪队列中选择一个进程为其分配处理机。\n需要进行进程调度与切换的情况：\n当前运行的进程主动放弃处理机（有的系统中只允许进程主动放弃处理机） 进程正常终止 运行过程中发生异常而终止 进程主动请求阻塞（如等待I/O） 当前运行的进程被动放弃处理机（有的系统中，进程可以主动放弃处理机，当又更紧急的任务需要处理时，也会强行剥夺处理机（被动放弃）） 分给进程的时间片用完 有更紧急的事情需要处理（如I/O中断） 有更高优先级的进程进入就绪队列 不能进行进程调度与切换的情况：\n在处理中断的过程中，中断处理过程复杂，与硬件密切相关，很难做到在中断处理的过程中进行进程切换。 进程在操作系统内核程序临界区中（但是进程在普通临界区中是可以进行调度、切换的）。 在原子操作过程中（原语）。原子操作不可中断，要一气呵成。 进程在操作系统内核程序临界区中不能进行调度与切换。\n临界资源：一个时间段内只允许一个进程使用的资源。个进程需要互斥地访问临界资源。\n临界区：访问临界资源的那段代码。\n内核程序临界区一般是用来访问某种内核数据结构的，比如就绪队列（由各就绪进程的PCB组成）\n2.进程调度方式 非剥夺调度方式，又称非抢占方式。即，只允许进程主动放弃处理机。在运行的过程中即便有更紧迫的任务到达，当前进程依然会继续使用处理机，直到进程终止或主动要求进入阻塞。\n实现简单，系统开销小但是无法及时处理紧急任务，更适合于早期的批处理系统。\n剥夺调度方式，又称抢占方式。当一个进程正在处理机上执行时，如果有一个更重要或紧迫的进程需要使用处理机，则立即暂停正在执行的进程，将处理机分配给更重要紧迫的那个进程。\n可以优先处理更紧急的进程，也可以实现让各进程按时间片轮流执行的功能（通过时钟中断）。更适合于实时操作系统、分时操作系统。\n3.进程的切换与过程 “狭义的进程调度”与“进程切换”的区别：\n狭义的进程调度指的是从就绪队列中选中一个要运行的进程（这个进程可以使刚刚被暂停执行的进程，也可以是另一个进程，后一种情况就需要进程切换）\n进程切换是指一个进程让出处理机，由另一个进程占用处理机的过程。\n广义的进程调度包含了选择一个进程和进程切换两个步骤。\n进程切换的过程主要完成了：\n对原来运行进程各数据的保存 对新进程各种数据的恢复 （如：程序计数器，程序状态字，各种数据寄存器等处理机现场信息，这些信息一般是保存在PCB中）\n注意：进程切换是有代价的，因此如果过于频繁地进行进程调度、切换，必然会使整个系统的效率降低，使系统能大部分时间都花在了进程切换上，而真正用于执行进程的时间减少。\n4.知识回顾 5.巴拉巴拉 关于“抢占式调度”和“非抢占式翘度”老师的课程说了后面会讲，这块我听的也是蒙蒙叨叨的，他说了这块不重要，理解即可。\n","permalink":"http://localhost:1313/posts/notes/os/%E5%8D%81%E4%B8%89%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%9A%84%E6%97%B6%E6%9C%BA%E5%88%87%E6%8D%A2%E4%B8%8E%E8%BF%87%E7%A8%8B%E8%B0%83%E5%BA%A6%E6%96%B9%E5%BC%8F/","summary":"\u003ch4 id=\"1进程调度的时机\"\u003e1.进程调度的时机\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e进程调度\u003c/strong\u003e（低级调度），就是按照某种算法从就绪队列中选择一个进程为其分配处理机。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e需要进行\u003c/strong\u003e进程调度与切换的情况：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当前运行的进程\u003cstrong\u003e主动放弃\u003c/strong\u003e处理机（有的系统中只允许进程主动放弃处理机）\n\u003cul\u003e\n\u003cli\u003e进程正常终止\u003c/li\u003e\n\u003cli\u003e运行过程中发生异常而终止\u003c/li\u003e\n\u003cli\u003e进程主动请求阻塞（如等待I/O）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e当前运行的进程\u003cstrong\u003e被动放弃\u003c/strong\u003e处理机（有的系统中，进程可以主动放弃处理机，当又更紧急的任务需要处理时，也会强行剥夺处理机（被动放弃））\n\u003cul\u003e\n\u003cli\u003e分给进程的时间片用完\u003c/li\u003e\n\u003cli\u003e有更紧急的事情需要处理（如I/O中断）\u003c/li\u003e\n\u003cli\u003e有更高优先级的进程进入就绪队列\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e","title":"十三、进程调度的时机，切换与过程调度方式"},{"content":"1.基本概念 当有一堆任务要处理，但由于资源有限，这些事情没办法同时处理，这就需要确定某种规则来决定处理这些任务的顺序，这就是“调度”研究的问题。在多道程序系统中，进程的数量往往是多于处理机个数的，这样不可能同时并行的处理各个进程。处理机调度，就是从就绪队列中按照一定的算法选择一个进程并将处理机分配给他运行，以实现进程的并发执行。\n2.调度的三个层次——高级调度 由于内存空间有限，有时无法将用户提交的作业全部放入内存，因此就需要某种规则来决定将作业调入内存的顺序。\n高级调度（作业调度），按一定的原则从外存上处于后备队列的作业中挑选一个（或多个）作业，给他们分配内存等重要资源，并建立相应的进程（建立 PCB），以使它（们）获得竞争处理机的权利。高级调度是辅存（外存）与内存之间的额调度，每个作业只调入一次，调出一次。**作业调入时会建立相应的 PCB，作业调出时才撤销 PCB。**高级调度主要是指调入的问题，因为只有调入的时机需要操作系统来确定，但调出的时机必然是作业运行结束才调出。\n3.调度的三个层次——中级调度 引入虚拟存储技术之后，可将暂时不能运行的程序调至外存等待。等他重新具备了运行条件且内存又稍有空间时，再重新调入内存。这么做的目的是提高内存利用率和系统吞吐量。暂时调到外存等待的进程状态为挂起状态。值得注意的是，PCB并不会一起调到外存，而是会常驻内存，PCB 中会记录进程数据在外存的存放位置，进程状态等信息，操作系统通过内存中的 PCB 来保持对各个进程的监控、管理。被挂起的进程 PCB 会被放到的挂起队列中。中级调度（内存调度），就是要决定将那个处于挂起状态的进程重新调入内存中。一个进程可能被多次调入、调出内存，因此中级调度发生的频率要比高级调度更高。\n（有点像就绪队列和阻塞队列）\n4.补充知识：进程的挂起状态与七状态模型 暂时调到外存等待的进程状态为挂起状态（挂起态）\n挂起态又可以进一步分为就绪挂起，阻塞挂起两种状态\n五状态模型 → 七状态模型\n5.调度的三个层次——低级调度 低级调度（进程调度）其主要任务时按照某种方法和策略从就绪队列中选取一个进程，将处理机分配给他。进程调度是操作系统中最基本的一种调度，在一般的操作系统中都必须配置进程调度。进程调度的频率很高，一般几十毫秒一次。\n6.三层调度的联系和对比 7.知识回顾 ","permalink":"http://localhost:1313/posts/notes/os/%E5%8D%81%E4%BA%8C%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E7%9A%84%E6%A6%82%E5%BF%B5%E5%B1%82%E6%AC%A1/","summary":"\u003ch4 id=\"1基本概念\"\u003e1.基本概念\u003c/h4\u003e\n\u003cp\u003e当有一堆任务要处理，但由于资源有限，这些事情没办法同时处理，这就需要确定\u003cstrong\u003e某种规则来决定处理这些任务的顺序\u003c/strong\u003e，这就是“调度”研究的问题。在多道程序系统中，进程的数量往往是多于处理机个数的，这样不可能同时并行的处理各个进程。\u003cstrong\u003e处理机调度\u003c/strong\u003e，就是从就绪队列中\u003cstrong\u003e按照一定的算法选择一个进程并将处理机分配给他\u003c/strong\u003e运行，以实现进程的并发执行。\u003c/p\u003e","title":"十二、处理机调度的概念，层次"},{"content":"1.什么是线程，为什么要引入线程 还没引入进程之前，系统中的各个程序只能串行执行。在传统的定成定义中，进程是程序的一次执行。但想实现多个功能显然不可能是由一个程序顺序处理就能实现的。如 QQ，可以同时进行视频，文字聊天，发送文件等操作。\n有的进程可能需要“同时”处理很多事情，而传统的进程只能串行的执行一系列程序。为此，引入了“线程”来增加进程的并发度。传统的进程是程序执行流的最小单位。引入线程后，线程成为了程序执行流的最小单位。可以把线程理解为“轻量级进程”。线程是一个基本的 CPU 执行单元，也是程序执行流的最小单位。\n引入线程后，不仅是进程之间可以并发，进程内的各线程之间也可以并发，**从而进一步提升了系统的并发度，**使得一个进程内也可以并发的处理各种任务（如 QQ 视频，文字聊天，传文件）。\n引入线程后，进程只作为除 CPU 之外的系统资源的分配单元（如打印机，内存地址空间等都是分配给进程的）。\n2.引入线程机制后的变化 3.线程的属性 4.线程的实现方式 （1）用户级线程\n用户级线程由应用程序通过线程库来实现。所有的线程管理工作都由应用程序负责（包括线程切换）。用户级线程中，线程切换可以在用户态下即可完成，无需操作系统干预。用户看来是有多个线程，但在操作系统看来，并意识不到线程的存在（用户线程对用户不透明，对操作系统透明）。可以理解为用户级线程就是“从用户视角能看到的线程。”\n（2）内核级线程（又可称为“内核支持的线程”）\n内核级线程的管理工作由操作系统内核完成。线程调度‘切换等工作都有内核负责，因此，内核级现成的切换必然需要在核心态下才能完成。可以这样理解，内核级线程就是“从操作系统内核视看能看到的线程”。\n在同时支持用户级线程和内核级线程的系统中，可采用二者组合的方式：将 n 个用户线程映射到 m 个内核级线程上（n \u0026gt;= m）:\n操作系统同只“看得见”内核级线程，因此只有内核级线程才是处理机分配的单位。\n例如：上面这个模型中，该进程由两个内核级线程，三个用户级线程。在用户看来，这个进程中有三个线程。但即使这个进程在一个拥有四核心的计算机上运行，也最多只能被分配到两个核心，最多只能有两个用户级线程并行执行。\n5.多线程模型 在同时支持多个用户级线程和内核级线程的系统中，有几个用户级线程映射到几个内核级线程的问题引出了“多线程模型”问题。\n（1）多对一模型\n多个用户及线程映射到一个内核级线程。每个用户进程只对应一个内核级进程。\n优点：用户级线程的切换在用户空间内即可完成，不需要切换到核心态，线程管理系统的开销小，效率高。\n缺点：当一个用户级线程被阻塞后，整个进程都会被阻塞，并发度不高。多个线程不可以在多核处理机上并行运行。\n（2）一对一模型\n一个用户级线程映射到一个内核级线程。每个用户进程有与用户线程同数量的内核级线程。\n优点：当一个线程被阻塞后，别的线程还可以继续执行，并发能力强，多线程可以在多核处理机上并行执行。\n缺点：一个用户进程会占用多个内核级线程，线程切换由操作系统内核完成，需要切换到核心态，因此线程管理的成本高，开销大。\n（3）多对多模型\n在同时支持用户级线程和内核级线程的系统中，可采用二者组合的方式：将 n 个用户线程映射到 m 个内核级线程上（n \u0026gt;= m）:\n克服了多对一模型并发度不高的缺点，又克服了一对一模型中一个用户进程占用太多内核级线程，开销太大的缺点。算是一种折中的解决方案。\n5.知识回顾 ]\n","permalink":"http://localhost:1313/posts/notes/os/%E5%8D%81%E4%B8%80%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/","summary":"\u003ch4 id=\"1什么是线程为什么要引入线程\"\u003e1.什么是线程，为什么要引入线程\u003c/h4\u003e\n\u003cp\u003e还没引入进程之前，系统中的各个程序只能串行执行。在传统的定成定义中，进程是程序的一次执行。但想实现多个功能显然不可能是由一个程序顺序处理就能实现的。如 QQ，可以同时进行视频，文字聊天，发送文件等操作。\u003c/p\u003e","title":"十一、线程概念和多线程模型"},{"content":"1.什么是进程通信 进程通信是进程之间的信息交换。\n进程是分配系统资源的单位（包括内存地址空间），因此各进程拥有的内存地址空间相互独立。\n为了保证安全，**一个进程不允许直接访问另一个进程的地址空间。**但是进程之间的信息交换又是必须实现的，为了保证进程间的安全通信，操作系统提供了一些方法。\n进程通信包括：共享存储，消息传递和管道通信。\n2.共享存储 操作系统为进程通信开辟了了共享的地址空间，两个进程对共享空间的访问必须是互斥的（互斥访问通过操作系统提供的工具实现，如 P，V 操作）。\n基于数据结构的共享\n比如空间里只能放一个长度为 10 的数组，这种共享方式速度慢、限制多，是一种低级通信方式。\n基于存储区的共享\n在内存中画出一块共享存储区，数据的形式、存放位都由进程控制，而不是操作系统。相比之下，这种共享方式速度更快，是一种高级通信方式。\n3.管道通信 管导通信基础\n管道通信的原理\n4.消息传递 进程间的数据交换以格式化的消息为单位，进程通过操作系统的“发送消息/接收消息”两个原语进行数据交换。\n直接通信方式\n格式化的消息包括消息头和消息体，消息头包括：发送进程 ID，接收进程 ID，消息类型，消息长度等格式化的信息（类似于计算机网络中的“报文”）。进程 1 创建一个消息发送给进程 2 的消息缓冲队列，进程 2 再从消息缓冲队列中读取消息。\n间接通信方式\n与直接通信原理基本相同，只不过消息要先发送到中间实体（信箱）中，因此也称“心想通信方式”。进程 1 通过发送原语将消息发送到信箱中，进程 2 通过接收原语接收属于自己的消息。\n5.知识回顾 ","permalink":"http://localhost:1313/posts/notes/os/%E5%8D%81%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/","summary":"\u003ch4 id=\"1什么是进程通信\"\u003e1.什么是进程通信\u003c/h4\u003e\n\u003cp\u003e进程通信是进程之间的信息交换。\u003c/p\u003e\n\u003cp\u003e进程是分配系统资源的单位（包括内存地址空间），因此\u003cstrong\u003e各进程拥有的内存地址空间相互独立\u003c/strong\u003e。\u003c/p\u003e","title":"十、进程通信"},{"content":"1.什么是进程控制 进程控制的主要功能是对系统中的所有进程实施有效的管理，它具有创建进程，撤销进程，实现进程间的状态转换等功能。简而言之，进程控制就是要时间进程状态的转换。\n2.如何实现进程控制 进程之间的状态切换中间都需要对 PCB 进行修改并且放入相应的队列中。假如说某一进程把 PCB 从某一队列放入另一个队列中，但 PCB 中状态标志并未被修改，这种情况会导致系统错误，因为 PCB 所处的队列与 PCB 中存储的状态标志位数据不一致。于是引入原语来实现进程控制。原语的特点是执行过程中不允许被中断。这种不可被中断的操作即原子操作。原语使用关中断指令和开中断指令实现。\n当原语开始执行时会先执行关中断指令，此时外部中断信号会被忽略。这样保证原语的操作不会被中断。当原语执行完毕后会执行开中断指令，这样外部中断信号又会被响应了，如下图：\n由此可见，开/关中断指令的权限非常大，必须只允许在核心态下执行的 特权指令 。\n3.进程控制相关原语 四种原语：\n创建原语 撤销原语 阻塞原语 唤醒原语 切换原语 4.知识回顾 分割线\n这章疑问有点多，应该看看书。\n","permalink":"http://localhost:1313/posts/notes/os/%E4%B9%9D%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/","summary":"\u003ch4 id=\"1什么是进程控制\"\u003e1.什么是进程控制\u003c/h4\u003e\n\u003cp\u003e进程控制的主要功能是对系统中的所有进程实施有效的管理，它具有创建进程，撤销进程，实现进程间的状态转换等功能。简而言之，\u003cstrong\u003e进程控制就是要时间进程状态的转换。\u003c/strong\u003e\u003c/p\u003e","title":"九、进程控制"},{"content":"1.进程的基本状态 三种基本状态：\n运行态：占有 cpu，并在 cpu 上运行 就绪态：已具备运行条件，但没有空闲 CPU 而暂时不能运行 阻塞态（或称等待态）：因等待某一事件而暂时不能执行 运行态：在单核处理及环境，每一时刻最多只能有一个进程处于运行态（双核环境下最多可以同时拥有两个进程处于运行态）\n就绪态：进程已经拥有了除处理及之外所有需要的资源，一旦获得处理机即可立即进入运行态开始运行。（万事俱备，只欠 CPU）\n阻塞态：如：等待操作系统扽配打印机，等待读取磁盘操作的结果。为了提高 CPU 利用率，需要先将其他进程需要的资源分配到位，才能得到 CPU 的服务。\n另外的两种状态：\n进程运行结束（或者由于 BUG 导致进程无法继续下去，如数组越界）需要撤销进程，操作系统需要完成撤销进程的相关操作，完成将分配给进程的资源回收，撤销进程的 PCB 等操作。\n创建态（新建态）：进程正在被创建，操作系统为其分配资源、创建 PCB 终止态（结束态）：进程正在从系统中撤销，操作系统会回收分配给进程的资源，撤销其 PCB 2.进程的状态转换 3.知识回顾 绿框知识重要\n","permalink":"http://localhost:1313/posts/notes/os/%E5%85%AB%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E4%B8%8E%E8%BD%AC%E6%8D%A2/","summary":"\u003ch4 id=\"1进程的基本状态\"\u003e1.进程的基本状态\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e三种基本状态：\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e运行态\u003c/strong\u003e：占有 cpu，并在 cpu 上运行\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e就绪态\u003c/strong\u003e：已具备运行条件，但没有空闲 CPU 而暂时不能运行\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e阻塞态（或称等待态）\u003c/strong\u003e：因等待某一事件而暂时不能执行\u003c/li\u003e\n\u003c/ol\u003e","title":"八、进程的状态与转换"},{"content":"1.进程的定义 程序什么么？程序就是一个指令序列。\n早期的计算机支支持单道程序。引入多道程序后，多道程序可以并发执行。为了方便操作系统管理、完成程序并发执行，引入了进程，进程实体的概念。\nPCB（进程控制块），程序段和数据段三部分构成了进程实体。进程实体被简称为进程。所谓创建进程实际上是创建进程实体中的 PCB；撤销进程实质上就是撤销进程实体中的 PCB。\nPCB 是进程存在的唯一标志。\n从不同角度，进程可以有不同的定义，比较传统典型的定义有：\n进程是程序的一次执行过程。 进程是一个程序及其数据在处理机上顺序执行时所发生的活动。 进程是具有独立功能的程序存在数据集合上运行的过程（强调动态性），他是系统进行资源分配和调度的一个独立单位。 引入进程实体的概念后，进程可被定义为：\n进程是实体的运行过程，是系统进行资源分配和调度的一个独立单位。 注：严格来说进程和实体进程并不一样，进程实体是静态的，进程则是动态的。除非题目专门考察二者区别，否则可以认为进程实体就是进程。因此也可以说“进程由程序段，数据段和 PCB 三部分组成”\n2.进程的组成 PCB 的组成\n进程的组成\n只要是和操作系统有关于管理进程的项目一定是被存储在 PCB 中。\n3. 进程的组织 在一个系统中通常有数百乃至数千个 PCB，为了对他们加以有效的管理，应当采用适当的方式把这些 PCB 组织起来。\n注：进程的组成讨论的是一个进程内部有哪些部分构成的问题，而进程的组织讨论的多个进程之间的组织方式的问题。\n进程的组织方式包括：\n链接方式 按照进程的状态将 PCB 分为多个队列 操作系统持有指向各个队列的指针 索引方式 根据进程状态的不同，建立几张索引表 操作系统持有指向各个索引表的指针 链接方式：\n索引方式：\n4.进程的特征 进程和程序是两种概念，相比较于程序，进程有以下特征：\n**（1）动态性：**进程是程序的一次执行过程，是动态地产生、变化和消亡的。\n（2）并发性：内存中有多个进程实体，个进程可以并发执行\n（3）独立性：进程是能独立运行，独立获得资源、独立接受调度的基本单位。\n（4）异步性：个进程按各自独立的，不可预知的速度向前推进，操作系统要提供进程同步机制来解决异步问题。\n（5）结构性：每个进程都会配置一个 PCB 凑够结构上看，该进程由程序段，数据段，PCB 组成\n动态性是进程最基本的特征。\n进程是资源分配，接收调度的基本单位。\n异步性会导致并发程序的执行结果的不确定性。\n5.小结 ","permalink":"http://localhost:1313/posts/notes/os/%E4%B8%83%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%AE%9A%E4%B9%89%E7%BB%84%E6%88%90%E8%87%AA%E5%88%B6%E6%96%B9%E5%BC%8F%E7%89%B9%E5%BE%81/","summary":"\u003ch4 id=\"1进程的定义\"\u003e1.进程的定义\u003c/h4\u003e\n\u003cp\u003e程序什么么？程序就是一个指令序列。\u003c/p\u003e\n\u003cp\u003e早期的计算机支支持单道程序。引入多道程序后，多道程序可以并发执行。为了方便操作系统管理、完成程序并发执行，引入了\u003cstrong\u003e进程，进程实体\u003c/strong\u003e的概念。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePCB（进程控制块），程序段和数据段三部分构成了进程实体\u003c/strong\u003e。进程实体被简称为进程。所谓创建进程实际上是创建进程实体中的 PCB；撤销进程实质上就是撤销进程实体中的 PCB。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003ePCB 是进程存在的唯一标志。\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e","title":"七、进程的定义、组成、自制方式、特征"},{"content":"前言 网上收集的方法做一个整合贴。\n1.基础配置 （1）安装 Next8.x\n可以直接下载 Next，将文件夹直接复制到 hexo 项目的 theme 文件夹下，修改项目的_config.yml 切换主题。\n或者直接使用 git 下载 Next 最新版本。Next8 的 Github\ncd hexo git clobe https://github.com/next-theme/hexo-theme-next themes/next （2）将博客更换为 next 主题\ntheme: next （3）配置基本信息\n这里的配置项是在博客根目录下的_config.yml，并非主题下的。\n# Site title: 樱花换小鱼干 #博客的标题 subtitle: \u0026#34;\u0026#34; description: \u0026#34;\u0026#34; #博客的描述 keywords: author: 樱花换小鱼干 #你的笔名 language: zh-CN #主题语言 timezone: \u0026#34;\u0026#34; （4）选配主题的几种排版\n有四种，只能选其一，去掉注释#\n# Schemes #scheme: Muse #scheme: Mist #scheme: Pisces scheme: Gemini （7）配置语言\n# You can set a language value if you prefer a translated version of CC license, e.g. deed.zh # CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org language: zh-CN Next 支持多种语言。进入　/next/languages,找到我们所需要要的语言，然后将其文件名替换上面的 zh-CN.\n（8）配置菜单\nNext 默认设置两个菜单项 home 和 archives。\n菜单项包含三个值：key:/link/ || icon\n注意：key,对大小写敏感。\nkey 即为下图中‘：’前单词，例如 home,\n/link 、icon 与之对应.\nkey 与之前设置的 luanage 相对应，如果设置为中文，则会自动转换为中文。\n/link 为网页对应的 url\nicon 为对应字体图标的类名。\n这里字体图标采用 font-awesome.\n如果要自定义菜单项，修改 Next 配置文件，如下：\nmenu: home: / || fa fa-home about: /about/ || fa fa-user tags: /tags/ || fa fa-tags #categories: /categories/ || fa fa-th archives: /archives/ || fa fa-archive #schedule: /schedule/ || fa fa-calendar #sitemap: /sitemap.xml || fa fa-sitemap #commonweal: /404/ || fa fa-heartbeat 菜单配置完成后需要配置对应的文件夹，否则点击相应的栏目会报错。\n比如要创建关于菜单，除了要在 menu 配置项目里取消注释，还要在站点根目录配置相应的链接。比如，我想要创建 tags 菜单，除了要取消 menu 的 tags 注释外，还要再根目录执行以下命令：\nhexo new page tags 其他的菜单类似。也可以在相应的目录里配置要显示的内容，支持 markdown 语法。\n--- title: 标签 date: 2022-04-15T11:41:49+08:00 type: \u0026#34;tags\u0026#34; --- 更改 ttle 后在站点的对应菜单会显示你更改的内容，此文本不可被删除，否则报错。\n如果自动生成的 index.md 里没有 type 配置项请自行按照上面的格式添加。\n（9）配置 favicon\n站点默认使用的 favicon 是 Next Icon 存在于 hexo-site/themes/next/source/images/目录下。里面存在有对应不同设备使用不同的 favicon。在这里我们可以使用自定义 favicon 来替代它。\n首先，我们将我们的 favicon 存放到 hexo-site/themes/next/source/images/　目录下，然后配置项目配置文件，否则 favicon 将不会被更改。\nfavicon: small: /images/xiaoyugan.png medium: /images/xiaoyugan.png apple_touch_icon: /images/xiaoyugan.png safari_pinned_tab: /images/xiaoyugan.png #android_manifest: /manifest.json （10）配置头像\n在 Next 中默认不展示头像，如需展示，我们需要进入 Next 配置文件，进行更改。\n修改自己头像\n# Sidebar Avatar avatar: # Replace the default image and set the url here. url: /images/xiaoyugan.png #/images/avatar.gif # 这里置为true可以显示圆形头像。 rounded: true # 这里置为true鼠标放在头像上会转动 rotated: false 其中 url 可以直接指定 url 地址\n（11）启用本地搜索\n在主题配置文件中找到\n# Local Search # Dependencies: https://github.com/next-theme/hexo-generator-searchdb local_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: false 将 enable 置为 true，并在站点根目录下执行：\nnpm install hexo-generator-searchdb --save （11）启用不蒜子阅读统计\n在主题配置目录中找到\n# Show Views / Visitors of the website / page with busuanzi. # For more information: http://ibruce.info/2015/04/04/busuanzi/ busuanzi_count: enable: true total_visitors: true total_visitors_icon: fa fa-user total_views: true total_views_icon: fa fa-eye post_views: true post_views_icon: far fa-eye 将 enable 置为 true\n（12）添加代码复制按钮\n找到如下配置项\ncodeblock: # Code Highlight theme # All available themes: https://theme-next.js.org/highlight/ theme: light: default dark: stackoverflow-dark prism: light: prism dark: prism-dark # Add copy button on codeblock copy_button: enable: true # Available values: default | flat | mac style: mac 将 copy_button 的 enable 改为 true 即可，style 可以选择 default | flat | mac 这三种。\n（13）安装相关依赖\n分别在站点根目录和主题根目录下执行：\nnpm install --save 至此，基本配置完成，站点基本元素已完善。\n（14）还有一些琐碎的配置\n如果觉得太麻烦可以直接用我的这一份配置文件：\n# =============================================================== # It\u0026#39;s recommended to use Alternate Theme Config to configure NexT # Modifying this file may result in merge conflict # See: https://theme-next.js.org/docs/getting-started/configuration # =============================================================== # --------------------------------------------------------------- # Theme Core Configuration Settings # See: https://theme-next.js.org/docs/theme-settings/ # --------------------------------------------------------------- # Allow to cache content generation. cache: enable: true # Remove unnecessary files after hexo generate. minify: true # Define custom file paths. # Create your custom files in site directory `source/_data` and uncomment needed files below. custom_file_path: #head: source/_data/head.njk #header: source/_data/header.njk #sidebar: source/_data/sidebar.njk #postMeta: source/_data/post-meta.njk #postBodyEnd: source/_data/post-body-end.njk #footer: source/_data/footer.njk #bodyEnd: source/_data/body-end.njk #variable: source/_data/variables.styl #mixin: source/_data/mixins.styl #style: source/_data/styles.styl # --------------------------------------------------------------- # Scheme Settings # --------------------------------------------------------------- # Schemes #scheme: Muse #scheme: Mist #scheme: Pisces scheme: Gemini # Dark Mode darkmode: false # --------------------------------------------------------------- # Site Information Settings # --------------------------------------------------------------- favicon: small: /images/xiaoyugan.png medium: /images/xiaoyugan.png apple_touch_icon: /images/xiaoyugan.png safari_pinned_tab: /images/xiaoyugan.png #android_manifest: /manifest.json # Custom Logo (Warning: Do not support scheme Mist) custom_logo: #/uploads/custom-logo.jpg # Creative Commons 4.0 International License. # See: https://creativecommons.org/about/cclicenses/ creative_commons: # Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero license: by-nc-sa # Available values: big | small size: small sidebar: false post: false # You can set a language value if you prefer a translated version of CC license, e.g. deed.zh # CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org language: zh-CN # Open graph settings # See: https://hexo.io/docs/helpers#open-graph open_graph: enable: true options: #twitter_card: \u0026lt;twitter:card\u0026gt; #twitter_id: \u0026lt;twitter:creator\u0026gt; #twitter_site: \u0026lt;twitter:site\u0026gt; #twitter_image: \u0026lt;twitter:image\u0026gt; #google_plus: \u0026lt;g+:profile_link\u0026gt; #fb_admins: \u0026lt;fb:admin_id\u0026gt; #fb_app_id: \u0026lt;fb:app_id\u0026gt; # --------------------------------------------------------------- # Menu Settings # --------------------------------------------------------------- # Usage: `Key: /link/ || icon` # Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive. # Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon. # External url should start with http:// or https:// menu: home: / || fa fa-home tags: /tags/ || fa fa-tags categories: /categories/ || fa fa-th archives: /archives/ || fa fa-archive about: /about/ || fa fa-user #schedule: /schedule/ || fa fa-calendar #sitemap: /sitemap.xml || fa fa-sitemap #commonweal: /404/ || fa fa-heartbeat # Enable / Disable menu icons / item badges. menu_settings: icons: true badges: false # --------------------------------------------------------------- # Sidebar Settings # See: https://theme-next.js.org/docs/theme-settings/sidebar # --------------------------------------------------------------- sidebar: # Sidebar Position. position: left #position: right # Manual define the sidebar width. If commented, will be default for: # Muse | Mist: 320 # Pisces | Gemini: 240 #width: 300 # Sidebar Display (only for Muse | Mist), available values: # - post expand on posts automatically. Default. # - always expand for all pages automatically. # - hide expand only when click on the sidebar toggle icon. # - remove totally remove sidebar including sidebar toggle. display: post # Sidebar padding in pixels. padding: 18 # Sidebar offset from top menubar in pixels (only for Pisces | Gemini). offset: 12 # Sidebar Avatar avatar: # Replace the default image and set the url here. url: /images/xiaoyugan.png #/images/avatar.gif # If true, the avatar will be displayed in circle. rounded: true # If true, the avatar will be rotated with the cursor. rotated: true # Posts / Categories / Tags in sidebar. site_state: true # Social Links # Usage: `Key: permalink || icon` # Key is the link label showing to end users. # Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon. social: #GitHub: https://github.com/yourname || fab fa-github E-Mail: mailto:orange_lun@outlook.com || fa fa-envelope #Weibo: https://weibo.com/yourname || fab fa-weibo #Google: https://plus.google.com/yourname || fab fa-google #Twitter: https://twitter.com/yourname || fab fa-twitter #FB Page: https://www.facebook.com/yourname || fab fa-facebook #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow #YouTube: https://youtube.com/yourname || fab fa-youtube #Instagram: https://instagram.com/yourname || fab fa-instagram #Skype: skype:yourname?call|chat || fab fa-skype social_icons: enable: true icons_only: false transition: false # Blog rolls links_settings: icon: fa fa-globe title: Links # Available values: block | inline layout: block links: #Title: https://example.com # Table of Contents in the Sidebar # Front-matter variable (nonsupport wrap expand_all). toc: enable: true # Automatically add list number to toc. number: false # If true, all words will placed on next lines if header width longer then sidebar width. wrap: false # If true, all level of TOC in a post will be displayed, rather than the activated part of it. expand_all: false # Maximum heading depth of generated toc. max_depth: 6 # --------------------------------------------------------------- # Footer Settings # See: https://theme-next.js.org/docs/theme-settings/footer # --------------------------------------------------------------- # Show multilingual switcher in footer. language_switcher: false footer: # Specify the year when the site was setup. If not defined, current year will be used. #since: 2021 # Icon between year and copyright info. icon: # Icon name in Font Awesome. See: https://fontawesome.com/icons name: fa fa-heart # If you want to animate the icon, set it to true. animated: false # Change the color of icon, using Hex Code. color: \u0026#34;#ff0000\u0026#34; # If not defined, `author` from Hexo `_config.yml` will be used. copyright: # Powered by Hexo \u0026amp; NexT powered: false # Beian ICP and gongan information for Chinese users. See: https://beian.miit.gov.cn, http://www.beian.gov.cn beian: enable: false icp: # The digit in the num of gongan beian. gongan_id: # The full num of gongan beian. gongan_num: # The icon for gongan beian. See: http://www.beian.gov.cn/portal/download gongan_icon_url: # --------------------------------------------------------------- # Post Settings # See: https://theme-next.js.org/docs/theme-settings/posts # --------------------------------------------------------------- # Automatically excerpt description in homepage as preamble text. excerpt_description: true # Read more button # If true, the read more button will be displayed in excerpt section. read_more_btn: true # Post meta display settings post_meta: item_text: true created_at: true updated_at: enable: true another_day: true categories: true # Post wordcount display settings # Dependencies: https://github.com/next-theme/hexo-word-counter symbols_count_time: separated_meta: true item_text_total: true # Use icon instead of the symbol # to indicate the tag at the bottom of the post tag_icon: false # Donate (Sponsor) settings # Front-matter variable (nonsupport animation). reward_settings: # If true, a donate button will be displayed in every article by default. enable: false animation: false #comment: Buy me a coffee reward: #wechatpay: /images/wechatpay.png #alipay: /images/alipay.png #paypal: /images/paypal.png #bitcoin: /images/bitcoin.png # Subscribe through Telegram Channel, Twitter, etc. # Usage: `Key: permalink || icon` (Font Awesome) follow_me: #Twitter: https://twitter.com/username || fab fa-twitter #Telegram: https://t.me/channel_name || fab fa-telegram #WeChat: /images/wechat_channel.jpg || fab fa-weixin #RSS: /atom.xml || fa fa-rss # Related popular posts # Dependencies: https://github.com/sergeyzwezdin/hexo-related-posts related_posts: enable: true title: # Custom header, leave empty to use the default one display_in_home: true # Post edit # Easily browse and edit blog source code online. post_edit: enable: false url: https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name/ # Link for view source #url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/ # Link for fork \u0026amp; edit # Show previous post and next post in post footer if exists # Available values: left | right | false post_navigation: left # --------------------------------------------------------------- # Custom Page Settings # See: https://theme-next.js.org/docs/theme-settings/custom-pages # --------------------------------------------------------------- # TagCloud settings for tags page. tagcloud: min: 14 # Minimum font size in px max: 14 # Maximum font size in px amount: 200 # Total amount of tags orderby: name # Order of tags order: 1 # Sort order # Google Calendar # Share your recent schedule to others via calendar page. calendar: calendar_id: \u0026lt;required\u0026gt; # Your Google account E-Mail api_key: \u0026lt;required\u0026gt; orderBy: startTime showLocation: false offsetMax: 72 # Time Range offsetMin: 4 # Time Range showDeleted: false singleEvents: true maxResults: 250 # --------------------------------------------------------------- # Misc Theme Settings # See: https://theme-next.js.org/docs/theme-settings/miscellaneous # --------------------------------------------------------------- # Preconnect CDN for fonts and plugins. # For more information: https://www.w3.org/TR/resource-hints/#preconnect preconnect: false # Set the text alignment in posts / pages. text_align: # Available values: start | end | left | right | center | justify | justify-all | match-parent desktop: justify mobile: justify # Reduce padding / margin indents on devices with narrow width. mobile_layout_economy: false # Browser header panel color. theme_color: light: \u0026#34;#222\u0026#34; dark: \u0026#34;#222\u0026#34; # Override browsers\u0026#39; default behavior. body_scrollbar: # Place the scrollbar over the content. overlay: false # Present the scrollbar even if the content is not overflowing. stable: false codeblock: # Code Highlight theme # All available themes: https://theme-next.js.org/highlight/ theme: light: default dark: stackoverflow-dark prism: light: prism dark: prism-dark # Add copy button on codeblock copy_button: enable: true # Available values: default | flat | mac style: mac back2top: enable: true # Back to top in sidebar. sidebar: false # Scroll percent label in b2t button. scrollpercent: false # Reading progress bar reading_progress: enable: false # Available values: left | right start_at: left # Available values: top | bottom position: top reversed: false color: \u0026#34;#37c6c0\u0026#34; height: 3px # Bookmark Support bookmark: enable: false # Customize the color of the bookmark. color: \u0026#34;#222\u0026#34; # If auto, save the reading progress when closing the page or clicking the bookmark-icon. # If manual, only save it by clicking the bookmark-icon. save: auto # `Follow me on GitHub` banner in the top-right corner. github_banner: enable: false permalink: https://github.com/yourname title: Follow me on GitHub # --------------------------------------------------------------- # Font Settings # --------------------------------------------------------------- # Find fonts on Google Fonts (https://fonts.google.com) # All fonts set here will have the following styles: # light | light italic | normal | normal italic | bold | bold italic # Be aware that setting too much fonts will cause site running slowly # --------------------------------------------------------------- # Web Safe fonts are recommended for `global` (and `title`): # Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS # --------------------------------------------------------------- font: enable: false # Uri of fonts host, e.g. https://fonts.googleapis.com (Default). host: # Font options: # `external: true` will load this font family from `host` above. # `family: Times New Roman`. Without any quotes. # `size: x.x`. Use `em` as unit. Default: 1 (16px) # Global font settings used for all elements inside \u0026lt;body\u0026gt;. global: external: true family: Lato size: # Font settings for site title (.site-title). title: external: true family: size: # Font settings for headlines (\u0026lt;h1\u0026gt; to \u0026lt;h6\u0026gt;). headings: external: true family: size: # Font settings for posts (.post-body). posts: external: true family: # Font settings for \u0026lt;code\u0026gt; and code blocks. codes: external: true family: # --------------------------------------------------------------- # SEO Settings # See: https://theme-next.js.org/docs/theme-settings/seo # --------------------------------------------------------------- # If true, site-subtitle will be added to index page. # Remember to set up your site-subtitle in Hexo `_config.yml` (e.g. subtitle: Subtitle) index_with_subtitle: false # Automatically add external URL with Base64 encrypt \u0026amp; decrypt. exturl: false # If true, an icon will be attached to each external URL exturl_icon: true # Google Webmaster tools verification. # See: https://developers.google.com/search google_site_verification: # Bing Webmaster tools verification. # See: https://www.bing.com/webmasters bing_site_verification: # Yandex Webmaster tools verification. # See: https://webmaster.yandex.ru yandex_site_verification: # Baidu Webmaster tools verification. # See: https://ziyuan.baidu.com/site baidu_site_verification: # --------------------------------------------------------------- # Third Party Plugins \u0026amp; Services Settings # See: https://theme-next.js.org/docs/third-party-services/ # More plugins: https://github.com/next-theme/awesome-next # You may need to install the corresponding dependency packages # --------------------------------------------------------------- # Math Formulas Render Support # Warning: Please install / uninstall the relevant renderer according to the documentation. # See: https://theme-next.js.org/docs/third-party-services/math-equations # Server-side plugin: https://github.com/next-theme/hexo-filter-mathjax math: # Default (false) will load mathjax / katex script on demand. # That is it only render those page which has `mathjax: true` in front-matter. # If you set it to true, it will load mathjax / katex script EVERY PAGE. every_page: false mathjax: enable: false # Available values: none | ams | all tags: none katex: enable: false # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex copy_tex: false # Easily enable fast Ajax navigation on your website. # For more information: https://github.com/next-theme/pjax pjax: false # FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images. # For more information: https://fancyapps.com/fancybox/ fancybox: false # A JavaScript library for zooming images like Medium. # Warning: Do not enable both `fancybox` and `mediumzoom`. # For more information: https://medium-zoom.francoischalifour.com mediumzoom: false # Vanilla JavaScript plugin for lazyloading images. # For more information: https://apoorv.pro/lozad.js/demo/ lazyload: false # Pangu Support # For more information: https://github.com/vinta/pangu.js # Server-side plugin: https://github.com/next-theme/hexo-pangu pangu: false # Quicklink Support # For more information: https://getquick.link # Front-matter variable (nonsupport home archive). quicklink: enable: false # Home page and archive page can be controlled through home and archive options below. # This configuration item is independent of `enable`. home: false archive: false # Default (true) will initialize quicklink after the load event fires. delay: true # Custom a time in milliseconds by which the browser must execute prefetching. timeout: 3000 # Default (true) will attempt to use the fetch() API if supported (rather than link[rel=prefetch]). priority: true # --------------------------------------------------------------- # Comments Settings # See: https://theme-next.js.org/docs/third-party-services/comments # --------------------------------------------------------------- # Multiple Comment System Support comments: # Available values: tabs | buttons style: tabs # Choose a comment system to be displayed by default. # Available values: disqus | disqusjs | changyan | livere | gitalk | utterances active: # Setting `true` means remembering the comment system selected by the visitor. storage: true # Lazyload all comment systems. lazyload: false # Modify texts or order for any naves, here are some examples. nav: #disqus: # text: Load Disqus # order: -1 #gitalk: # order: -2 # Disqus # For more information: https://disqus.com disqus: enable: false shortname: count: true # DisqusJS # For more information: https://disqusjs.skk.moe disqusjs: enable: false # API Endpoint of Disqus API (https://disqus.com/api/docs/). # Leave api empty if you are able to connect to Disqus API. Otherwise you need a reverse proxy for it. # For example: # api: https://disqus.skk.moe/disqus/ api: apikey: # Register new application from https://disqus.com/api/applications/ shortname: # See: https://disqus.com/admin/settings/general/ # Changyan # For more information: https://changyan.kuaizhan.com changyan: enable: false appid: appkey: # LiveRe comments system # You can get your uid from https://livere.com/insight/myCode (General web site) livere_uid: # \u0026lt;your_uid\u0026gt; # Gitalk # For more information: https://gitalk.github.io gitalk: enable: false github_id: # GitHub repo owner repo: # Repository name to store issues client_id: # GitHub Application Client ID client_secret: # GitHub Application Client Secret admin_user: # GitHub repo owner and collaborators, only these guys can initialize gitHub issues distraction_free_mode: true # Facebook-like distraction free mode # When the official proxy is not available, you can change it to your own proxy address proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token # This is official proxy address # Gitalk\u0026#39;s display language depends on user\u0026#39;s browser or system environment # If you want everyone visiting your site to see a uniform language, you can set a force language value # Available values: en | es-ES | fr | ru | zh-CN | zh-TW language: # Utterances # For more information: https://utteranc.es utterances: enable: false repo: user-name/repo-name # Github repository owner and name # Available values: pathname | url | title | og:title issue_term: pathname # Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light theme: github-light # Isso # For more information: https://posativ.org/isso/ isso: # \u0026lt;data_isso\u0026gt; # --------------------------------------------------------------- # Post Widgets \u0026amp; Content Sharing Services # See: https://theme-next.js.org/docs/third-party-services/post-widgets # --------------------------------------------------------------- # Star rating support to each article. # To get your ID visit https://widgetpack.com rating: enable: false id: # \u0026lt;app_id\u0026gt; color: \u0026#34;#fc6423\u0026#34; # AddThis Share. See: https://www.addthis.com # Go to https://www.addthis.com/dashboard to customize your tools. add_this_id: # --------------------------------------------------------------- # Statistics and Analytics # See: https://theme-next.js.org/docs/third-party-services/statistics-and-analytics # --------------------------------------------------------------- # Google Analytics # See: https://analytics.google.com google_analytics: tracking_id: # \u0026lt;app_id\u0026gt; # By default, NexT will load an external gtag.js script on your site. # If you only need the pageview feature, set the following option to true to get a better performance. only_pageview: false # Baidu Analytics # See: https://tongji.baidu.com baidu_analytics: # \u0026lt;app_id\u0026gt; # Growingio Analytics # See: https://www.growingio.com growingio_analytics: # \u0026lt;project_id\u0026gt; # Cloudflare Web Analytics # See: https://www.cloudflare.com/web-analytics/ cloudflare_analytics: # Microsoft Clarity Analytics # See: https://clarity.microsoft.com/ clarity_analytics: # \u0026lt;project_id\u0026gt; # Show number of visitors of each article. # You can visit https://www.leancloud.cn to get AppID and AppKey. leancloud_visitors: enable: false app_id: # \u0026lt;your app id\u0026gt; app_key: # \u0026lt;your app key\u0026gt; # Required for apps from CN region server_url: # \u0026lt;your server url\u0026gt; # Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security # If you don\u0026#39;t care about security in leancloud counter and just want to use it directly # (without hexo-leancloud-counter-security plugin), set `security` to `false`. security: true # Another tool to show number of visitors to each article. # Visit https://console.firebase.google.com/u/0/ to get apiKey and projectId. # Visit https://firebase.google.com/docs/firestore/ to get more information about firestore. firestore: enable: false collection: articles # Required, a string collection name to access firestore database apiKey: # Required projectId: # Required # Show Views / Visitors of the website / page with busuanzi. # For more information: http://ibruce.info/2015/04/04/busuanzi/ busuanzi_count: enable: true total_visitors: true total_visitors_icon: fa fa-user total_views: true total_views_icon: fa fa-eye post_views: true post_views_icon: far fa-eye # --------------------------------------------------------------- # Search Services # See: https://theme-next.js.org/docs/third-party-services/search-services # --------------------------------------------------------------- # Algolia Search # For more information: https://www.algolia.com algolia_search: enable: false hits: per_page: 10 # Local Search # Dependencies: https://github.com/next-theme/hexo-generator-searchdb local_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: false # --------------------------------------------------------------- # Chat Services # See: https://theme-next.js.org/docs/third-party-services/chat-services # --------------------------------------------------------------- # A button to open designated chat widget in sidebar. # Firstly, you need to enable and configure the chat service. chat: enable: false icon: fa fa-comment # Icon name in Font Awesome, set false to disable icon. text: Chat # Button text, change it as you wish. # Chatra Support # For more information: https://chatra.com # Dashboard: https://app.chatra.io/settings/general chatra: enable: false async: true id: # Visit Dashboard to get your ChatraID #embed: # Unfinished experimental feature for developers. See: https://chatra.com/help/api/#injectto # Tidio Support # For more information: https://www.tidio.com # Dashboard: https://www.tidio.com/panel/dashboard tidio: enable: false key: # Public Key, get it from dashboard. See: https://www.tidio.com/panel/settings/developer # Gitter Support # For more information: https://gitter.im gitter: enable: false room: # --------------------------------------------------------------- # Tags Settings # See: https://theme-next.js.org/docs/tag-plugins/ # --------------------------------------------------------------- # Note tag (bootstrap callout) note: # Note tag style values: # - simple bootstrap callout old alert style. Default. # - modern bootstrap callout new (v2-v3) alert style. # - flat flat callout style with background, like on Mozilla or StackOverflow. # - disabled disable all CSS styles import of note tag. style: simple icons: false # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6). # Offset also applied to label tag variables. This option can work with disabled note tag. light_bg_offset: 0 # Tabs tag tabs: # Make the nav bar of tabs with long content stick to the top. sticky: false transition: tabs: false labels: true # PDF tag # NexT will try to load pdf files natively, if failed, pdf.js will be used. # So, you have to install the dependency of pdf.js if you want to use pdf tag and make it available to all browsers. # Dependencies: https://github.com/next-theme/theme-next-pdf pdf: enable: false # Default height height: 500px # Mermaid tag mermaid: enable: false # Available themes: default | dark | forest | neutral theme: light: default dark: dark # --------------------------------------------------------------- # Animation Settings # --------------------------------------------------------------- # Use Animate.css to animate everything. # For more information: https://animate.style motion: enable: true async: false transition: # All available transition variants: https://theme-next.js.org/animate/ post_block: fadeIn post_header: fadeInDown post_body: fadeInDown coll_header: fadeInLeft # Only for Pisces | Gemini. sidebar: fadeInUp # Progress bar in the top during page loading. # For more information: https://github.com/CodeByZach/pace pace: enable: true # All available colors: # black | blue | green | orange | pink | purple | red | silver | white | yellow color: black # All available themes: # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal theme: material # Canvas ribbon # For more information: https://github.com/hustcc/ribbon.js canvas_ribbon: enable: true size: 300 # The width of the ribbon alpha: 0.4 # The transparency of the ribbon zIndex: -1 # The display level of the ribbon # --------------------------------------------------------------- # CDN Settings # See: https://theme-next.js.org/docs/advanced-settings/vendors # --------------------------------------------------------------- vendors: # The CDN provider of NexT internal scripts. # Available values: local | jsdelivr | unpkg | cdnjs | custom # Warning: If you are using the latest master branch of NexT, please set `internal: local` internal: local # The default CDN provider of third-party plugins. # Available values: local | jsdelivr | unpkg | cdnjs | custom # Dependencies for `plugins: local`: https://github.com/next-theme/plugins plugins: jsdelivr # Custom CDN URL # For example: # custom_cdn_url: https://cdn.jsdelivr.net/npm/${npm_name}@${version}/${minified} # custom_cdn_url: https://cdnjs.cloudflare.com/ajax/libs/${cdnjs_name}/${version}/${cdnjs_file} custom_cdn_url: # Assets # Accelerate delivery of static files using a CDN # The js option is only valid when vendors.internal is local. css: css js: js images: images # Waline # For more information: https://waline.js.org, https://github.com/lizheming/waline waline: enable: true avatarCDN: https://sdn.geekzu.org/avatar/ serverURL: https://waline-qmkdgwexn-ivy-lun.vercel.app/ # Waline server address url placeholder: \u0026#34;请在评论时在上面留下昵称和邮箱哦😊\u0026#34; # Comment box placeholder avatar: robohash # Gravatar style meta: [nick, mail, link] # Custom comment header pageSize: 10 # Pagination size lang: zh-cn # Language, available values: en, zh-cn visitor: false # Article reading statistic comment_count: true # If false, comment count will only be displayed in post page, not in home page requiredMeta: [] # Set required fields: [nick] | [nick, mail] libUrl: # Set custom library cdn url 2.花里胡哨的配置 ==一些稍微高级点的配置教程==\n（1）添加 waline 评论系统\n具体文档请看——\u0026gt;Waline 官网，按照官网教程配置后端。\n配置完成后，在站点根目录打开命令执行下面的命令，安装 waline 插件最新版本：\nnpm install @waline/hexo-next --save 随后在主题配置文件中引入 waline：\n# Waline # For more information: https://waline.js.org, https://github.com/lizheming/waline waline: enable: true serverURL: https://waline.example.com # 在这里粘贴你获得的评论地址 placeholder: \u0026#34;Just go\u0026#34; # 这里是评论框里显示的文字 avatar: mm # 头像 meta: [nick, mail, link] # Custom comment header pageSize: 10 # Pagination size lang: zh-cn # Language, available values: en, zh-cn visitor: false # Article reading statistic comment_count: true # If false, comment count will only be displayed in post page, not in home page requiredMeta: [] # Set required fields: [nick] | [nick, mail] libUrl: # Set custom library cdn url 如果 avatar 无法使用，可以直接在 waline 的配置中添加 gravatar 的国内 cdn：\nhttps://sdn.geekzu.org/avatar/ （2）彩色标签云\n在/themes/next/layout/目录下，新增`tag-color.njk 文件，加入下方代码：\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; var alltags = document.getElementsByClassName(\u0026#34;tag-cloud-tags\u0026#34;); var tags = alltags[0].getElementsByTagName(\u0026#34;a\u0026#34;); for (var i = tags.length - 1; i \u0026gt;= 0; i--) { var golden_ratio = 0.618033988749895; var s = 0.5; var v = 0.999; var h = golden_ratio + Math.random() * 0.8 - 0.5; var h_i = parseInt(h * 6); var f = h * 6 - h_i; var p = v * (1 - s); var q = v * (1 - f * s); var t = v * (1 - (1 - f) * s); var r, g, b; switch (h_i) { case 0: r = v; g = t; b = p; break; case 1: r = q; g = v; b = p; break; case 2: r = p; g = v; b = t; break; case 3: r = p; g = q; b = v; break; case 4: r = t; g = p; b = v; break; case 5: r = v; g = p; b = q; break; default: r = 1; g = 1; b = 1; } tags[i].style.background = \u0026#34;rgba(\u0026#34; + parseInt(r * 255) + \u0026#34;,\u0026#34; + parseInt(g * 255) + \u0026#34;,\u0026#34; + parseInt(b * 255) + \u0026#34;,\u0026#34; + 0.5 + \u0026#34;)\u0026#34;; } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .tag-cloud-tags { text-align: center; counter-reset: tags; } .tag-cloud-tags a { display: inline-block; border: 0px; border-radius: 10px; padding: 0px 10px; margin: 8px; color: rgba(34, 34, 34, 0.8); } /* 文字前添加相应的符号，content后的Unicode可以自定义*/ .tag-cloud-tags a:before { font-family: \u0026#34;Font Awesome 5 Free\u0026#34;; content: \u0026#34;\\f02b\u0026#34;; font-weight: 900; } .tag-cloud-tags a:hover { box-shadow: 0px 5px 15px 0px rgba(0, 0, 0, 0.4); transform: scale(1.1); transition-duration: 0.15s; } \u0026lt;/style\u0026gt; 在/themes/next/layout/page.swig/中引入 tag-color.swig：\n在下方加上 {% include 'tag-color.swig' %} 代码\n\u0026lt;div class=\u0026#34;post-body{% if page.direction and page.direction.toLowerCase() === \u0026#39;rtl\u0026#39; %} rtl{% endif %}\u0026#34;\u0026gt; {%- if page.type === \u0026#39;tags\u0026#39; %} {%- include \u0026#39;_partials/page/tags.njk\u0026#39; -%} {% elif page.type === \u0026#39;categories\u0026#39; %} {%- include \u0026#39;_partials/page/categories.njk\u0026#39; -%} {% elif page.type === \u0026#39;schedule\u0026#39; %} {%- include \u0026#39;_partials/page/schedule.njk\u0026#39; -%} {% else %} {{ page.content }} {%- endif %} {%- include \u0026#39;tag-color.njk\u0026#39; %} #这里是添加的代码 \u0026lt;/div\u0026gt; 修改文章底部标签样式\n打开 themes/next/layout/_macro/post.njk，找到以下代码并修改：\n- {%- set tag_indicate = \u0026#39;\u0026lt;i class=\u0026#34;fa fa-tag\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026#39; if theme.tag_icon else \u0026#39;#\u0026#39; %} + {%- set tag_indicate = \u0026#39;\u0026lt;i class=\u0026#34;fa fa-tag\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026#39; if theme.tag_icon else \u0026#39;\u0026lt;i class=\u0026#34;fa fa-tag\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026#39; %} （3）启用圆角\n打开 next/source/css/_variables/Gemini.styl，将以下两行代码取消注释：\n// $border-radius-inner = 0 0 3px 3px; // $border-radius = 3px; 并修改为：\n$border-radius-inner = 25px 25px 25px 25px; $border-radius = 25px; 即可启用大圆角，如不喜欢可以自行修改上面的值。\n（4）更改鼠标指针\n找到 themes/next/source/css/_variables/Gemini.styl，添加如下代码：\n* { cursor: url(https://deerblog.xyz/blog-image/Arrow.cur), auto; } :link { cursor: url(https://deerblog.xyz/blog-image/Hand.cur), auto; } （5）添加全站美化元素\n找到文件 themes/next/layout/_partials/footer.njk，在末尾添加以下代码：\n{# 樱花飘落 #} \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/wallleap/cdn@latest/js/sakura.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {# 星星跟随坠落 #} \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/cungudafa/cdn@2.1.2/js/cursor.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {# 搞怪标题 #} \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/wallleap/cdn@latest/js/hititle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {# 爱心 #} \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/wallleap/cdn/js/love.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ","permalink":"http://localhost:1313/posts/notes/hexo/hexo-next8-x%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/","summary":"\u003ch4 id=\"前言\"\u003e前言\u003c/h4\u003e\n\u003cp\u003e网上收集的方法做一个整合贴。\u003c/p\u003e","title":"Hexo Next8.x美化配置记录"},{"content":"1.什么是系统调用 操作系统是用户和计算机硬件之间的接口需要向上层提供一些简单易用的服务。主要包括命令接口和程序接口。其中，程序接口由一组==系统调用==组成。\n用户接口：\n命令接口（允许用户直接使用）\n联机命令接口：用户说一句，系统做一句 脱机命令接口：用户说一堆，系统做一堆。 程序接口（允许用户通过程序间接使用）：由一组系统调用组成。 系统调用就是操作系统提供给程序使用的接口，可以理解为一种可供应用程序调用的函数，应用程序可以发出系统调用请求来获得操作系统的服务。\n2.系统调用的作用： 应用程序通过系统调用请求操作系统的服务。系统中的各种共享资源由操作系统统一管理，因此在用户程序中，凡事与资源有关的操作（如存储分配，I/O 操作，文件管理等），都必须通过系统调用的方式像操作系统提出服务请求，由操作系统代为完成，这样可以保证系统的稳定性和安全性，防止用户进行非法操作。\n系统调用（按功能分类）：\n设备管理：完成设备的请求、释放、启动等工作 文件管理：完成文件的读写、创建、删除等功能 进程控制：完成进程的创建。撤销、阻塞、唤醒等功能 进程通信：完成进程之间的消息传递、信号传递等功能 内存管理：完成内存的分配、回收等功能 系统调用相关处理涉及到对系统资源的管理，对进程的控制，这些功能需要执行一些特权指令才能完成，因此系统调用的相关处理需要在核心态下完成。\n3.系统调用与库函数的区别 4.系统调用背后的过程 首先需要做的是把传入系统调用的参数用相应的指令放入相应的通用寄存器中并执行相应的陷入指令（interrupt 的缩写，此汇编指令的作用是引发一次系统中断），指令运行在用户态。当指令被执行时系统会执行相应的系统调用服务程序，这时候系统中断开始并运行在核心态，待系统调用完成后会把执行结果返回给用户程序，重新回到用户态，继续执行后续操作。如下图所示：\n有些书上陷入指令被叫做访管指令。概念是：因操作系统不允许用户态运行某些“危险性”高的指令，于是用户态运行这些指令的结果会转化成操作系统的核心态（管态）去运行。\n上图注意 3 补充：核心态只能执行系统调用，不能请求系统调用；用户态不能执行系统调用，只能请求系统调用。\n**系统调用发生在用户态，执行在核心态。**比如说你去仓库提货，仓库有专门的管理员而且你并不能进入仓库。管理员在门口待命。你过去跟他说你要什么什么，仓库管理员就进仓库提你想要的货物，提完货物后会回到仓库门口把货物交给你。在这个过程中，门外就相当于用户态，仓库内就相当于核心态。你跟管理员要货就相当于请求一次系统调用，管理员进仓库给你拿货就相当于执行了一次系统调用，并在拿完货后出门给我你货物，这个过程就相当于返回系统调用的结果。很简单的道理。\n吧啦吧啦：有的弹幕说中断就是切换任务的，我我个人觉得说的好像也蛮准确的\n5.知识回顾 ","permalink":"http://localhost:1313/posts/notes/os/%E5%85%AD%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/","summary":"\u003ch4 id=\"1什么是系统调用\"\u003e1.什么是系统调用\u003c/h4\u003e\n\u003cp\u003e操作系统是用户和计算机硬件之间的接口需要向上层提供一些简单易用的服务。主要包括\u003cstrong\u003e命令接口\u003c/strong\u003e和\u003cstrong\u003e程序接口\u003c/strong\u003e。其中，程序接口由一组==\u003cstrong\u003e系统调用\u003c/strong\u003e==组成。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e用户接口：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e命令接口（允许用户直接使用）\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e联机命令接口：用户说一句，系统做一句\u003c/li\u003e\n\u003cli\u003e脱机命令接口：用户说一堆，系统做一堆。\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e程序接口（允许用户通过程序间接使用）：由一组系统调用组成。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e系统调用就是操作系统提供给程序使用的接口，可以理解为一种可供应用程序调用的函数，应用程序可以发出系统调用请求来获得操作系统的服务。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\u003c/blockquote\u003e\n\u003ch5 id=\"2系统调用的作用\"\u003e2.系统调用的作用：\u003c/h5\u003e\n\u003cp\u003e应用程序通过系统调用请求操作系统的服务。系统中的各种共享资源由操作系统统一管理，因此在用户程序中，凡事与资源有关的操作（如存储分配，I/O 操作，文件管理等），都必须通过系统调用的方式像操作系统提出服务请求，由操作系统代为完成，这样\u003cstrong\u003e可以保证系统的稳定性和安全性\u003c/strong\u003e，防止用户进行非法操作。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e系统调用\u003c/strong\u003e（按功能分类）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e设备管理\u003c/strong\u003e：完成设备的请求、释放、启动等工作\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e文件管理\u003c/strong\u003e：完成文件的读写、创建、删除等功能\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e进程控制\u003c/strong\u003e：完成进程的创建。撤销、阻塞、唤醒等功能\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e进程通信\u003c/strong\u003e：完成进程之间的消息传递、信号传递等功能\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e内存管理\u003c/strong\u003e：完成内存的分配、回收等功能\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e系统调用相关处理涉及到对系统资源的管理，对进程的控制，这些功能需要执行一些\u003cstrong\u003e特权指令\u003c/strong\u003e才能完成，因此\u003cstrong\u003e系统调用的相关处理\u003c/strong\u003e需要在\u003cstrong\u003e核心态\u003c/strong\u003e下完成。\u003c/p\u003e\u003c/blockquote\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"3系统调用与库函数的区别\"\u003e3.系统调用与库函数的区别\u003c/h4\u003e\n\u003cp\u003e\u003cimg alt=\"区别\" loading=\"lazy\" src=\"https://s1.ax1x.com/2022/04/13/LMvy5D.png\"\u003e\u003c/p\u003e\n\u003ch4 id=\"4系统调用背后的过程\"\u003e4.系统调用背后的过程\u003c/h4\u003e\n\u003cp\u003e首先需要做的是把传入系统调用的参数用相应的指令放入相应的通用寄存器中并执行相应的陷入指令（interrupt 的缩写，此汇编指令的作用是引发一次系统中断），指令运行在\u003cstrong\u003e用户态\u003c/strong\u003e。当指令被执行时系统会执行相应的系统调用服务程序，这时候系统中断开始并运行在\u003cstrong\u003e核心态\u003c/strong\u003e，待系统调用完成后会把执行结果返回给用户程序，重新回到用户态，继续执行后续操作。如下图所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"过程\" loading=\"lazy\" src=\"https://s1.ax1x.com/2022/04/13/LMvRxA.png\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e有些书上陷入指令被叫做访管指令。概念是：因操作系统不允许用户态运行某些“危险性”高的指令，于是用户态运行这些指令的结果会转化成操作系统的核心态（管态）去运行。\u003c/p\u003e\n\u003cp\u003e上图注意 3 补充：\u003cstrong\u003e核心态只能执行系统调用，不能请求系统调用；用户态不能执行系统调用，只能请求系统调用\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e**系统调用发生在用户态，执行在核心态。**比如说你去仓库提货，仓库有专门的管理员而且你并不能进入仓库。管理员在门口待命。你过去跟他说你要什么什么，仓库管理员就进仓库提你想要的货物，提完货物后会回到仓库门口把货物交给你。在这个过程中，门外就相当于用户态，仓库内就相当于核心态。你跟管理员要货就相当于请求一次系统调用，管理员进仓库给你拿货就相当于执行了一次系统调用，并在拿完货后出门给我你货物，这个过程就相当于返回系统调用的结果。很简单的道理。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e吧啦吧啦：有的弹幕说中断就是切换任务的，我我个人觉得说的好像也蛮准确的\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003c/blockquote\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"5知识回顾\"\u003e5.知识回顾\u003c/h4\u003e\n\u003cp\u003e\u003cimg alt=\"回顾\" loading=\"lazy\" src=\"https://s1.ax1x.com/2022/04/13/LMxCiF.png\"\u003e\u003c/p\u003e","title":"六、系统调用"},{"content":"1.正文 在 NexT 主题下的 scripts 目录中创建 events.js\nvar exec = require(\u0026#39;child_process\u0026#39;).exec; hexo.on(\u0026#39;new\u0026#39;, function(data){ exec(\u0026#39;open -a MacDown \u0026#39; + data.path); }); 在 NexT 主题下的 scripts 目录中创建 codeblock.js\nvar attributes = [ \u0026#39;autocomplete=\u0026#34;off\u0026#34;\u0026#39;, \u0026#39;autocorrect=\u0026#34;off\u0026#34;\u0026#39;, \u0026#39;autocapitalize=\u0026#34;off\u0026#34;\u0026#39;, \u0026#39;spellcheck=\u0026#34;false\u0026#34;\u0026#39;, \u0026#39;contenteditable=\u0026#34;true\u0026#34;\u0026#39; ] var attributesStr = attributes.join(\u0026#39; \u0026#39;) hexo.extend.filter.register(\u0026#39;after_post_render\u0026#39;, function (data) { while (/\u0026lt;figure class=\u0026#34;highlight ([a-zA-Z]+)\u0026#34;\u0026gt;.*?\u0026lt;\\/figure\u0026gt;/.test(data.content)) { data.content = data.content.replace(/\u0026lt;figure class=\u0026#34;highlight ([a-zA-Z]+)\u0026#34;\u0026gt;.*?\u0026lt;\\/figure\u0026gt;/, function () { var language = RegExp.$1 || \u0026#39;plain\u0026#39; var lastMatch = RegExp.lastMatch lastMatch = lastMatch.replace(/\u0026lt;figure class=\u0026#34;highlight /, \u0026#39;\u0026lt;figure class=\u0026#34;iseeu highlight /\u0026#39;) return \u0026#39;\u0026lt;div class=\u0026#34;highlight-wrap\u0026#34;\u0026#39; + attributesStr + \u0026#39;data-rel=\u0026#34;\u0026#39; + language.toUpperCase() + \u0026#39;\u0026#34;\u0026gt;\u0026#39; + lastMatch + \u0026#39;\u0026lt;/div\u0026gt;\u0026#39; }) } return data }) 在 themes/next/source/css/_common/components/highlight/highlight.styl 的基础上调整了下样式，包裹上一层类 mac Panel 的效果。\n==注： 这里不用删除原来 highlight.styl 里边的内容，只需要在末尾添加下面代码即可==\n.highlight-wrap[data-rel] { position: relative; overflow: hidden; border-radius: 5px; box-shadow: 0 10px 30px 0px rgba(0, 0, 0, 0.4); margin: 35px 0; ::-webkit-scrollbar { height: 10px; } ::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); border-radius: 10px; } ::-webkit-scrollbar-thumb { border-radius: 10px; -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.5); } \u0026amp;::before { color: white; content: attr(data-rel); height: 38px; line-height: 38px; background: #21252b; color: #fff; font-size: 16px; position: absolute; top: 0; left: 0; width: 100%; font-family: \u0026#34;Source Sans Pro\u0026#34;, sans-serif; font-weight: bold; padding: 0px 80px; text-indent: 15px; float: left; } \u0026amp;::after { content: \u0026#34; \u0026#34;; position: absolute; -webkit-border-radius: 50%; border-radius: 50%; background: #fc625d; width: 12px; height: 12px; top: 0; left: 20px; margin-top: 13px; -webkit-box-shadow: 20px 0px #fdbc40, 40px 0px #35cd4b; box-shadow: 20px 0px #fdbc40, 40px 0px #35cd4b; z-index: 3; } } 在 highlight.styl 中找到如下部分代码，修改 margin 为 36px 0 0 0：\n$code-block { overflow: auto; - margin: 20px 0; //这一行改为 + margin: 36px 0 0 0; //这个 padding: 0; font-size $code-font-size; color: $highlight-foreground; background: $highlight-background; line-height: $line-height-code-block; } 在主题中将高亮代码变为：night eighties\nhighlight_theme: night eighties; 最后来要在网站根目录下打开 Git Bash，然后执行以下命令重新生成静态页面：\nhexo clean \u0026amp;\u0026amp; hexo g ","permalink":"http://localhost:1313/posts/notes/hexo/hexo-next%E4%B8%BB%E9%A2%98%E4%BB%A3%E7%A0%81%E5%9D%97%E7%BE%8E%E5%8C%96/","summary":"\u003ch4 id=\"1正文\"\u003e1.正文\u003c/h4\u003e\n\u003cp\u003e在 NexT 主题下的 scripts 目录中创建 events.js\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003evar\u003c/span\u003e \u003cspan class=\"nt\"\u003eexec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nt\"\u003erequire\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;child_process\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eexec\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003ehexo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eon\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;new\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nt\"\u003efunction\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nt\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003eexec(\u0026#39;open\u003c/span\u003e \u003cspan class=\"err\"\u003e-a\u003c/span\u003e \u003cspan class=\"err\"\u003eMacDown\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"err\"\u003e+\u003c/span\u003e \u003cspan class=\"err\"\u003edata.path)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 NexT 主题下的 scripts 目录中创建 codeblock.js\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003evar\u003c/span\u003e \u003cspan class=\"nt\"\u003eattributes\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s1\"\u003e\u0026#39;autocomplete=\u0026#34;off\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s1\"\u003e\u0026#39;autocorrect=\u0026#34;off\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s1\"\u003e\u0026#39;autocapitalize=\u0026#34;off\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s1\"\u003e\u0026#39;spellcheck=\u0026#34;false\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"s1\"\u003e\u0026#39;contenteditable=\u0026#34;true\u0026#34;\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003evar\u003c/span\u003e \u003cspan class=\"nt\"\u003eattributesStr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nt\"\u003eattributes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003ejoin\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003ehexo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eextend\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003eregister\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;after_post_render\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nt\"\u003efunction\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nt\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"err\"\u003ewhile\u003c/span\u003e \u003cspan class=\"err\"\u003e(/\u0026lt;figure\u003c/span\u003e \u003cspan class=\"err\"\u003eclass=\u0026#34;highlight\u003c/span\u003e \u003cspan class=\"err\"\u003e([a-zA-Z]+)\u0026#34;\u0026gt;.*?\u0026lt;\\/figure\u0026gt;/.test(data.content))\u003c/span\u003e \u003cspan class=\"err\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"err\"\u003edata.content\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003edata.content.replace(/\u0026lt;figure\u003c/span\u003e \u003cspan class=\"err\"\u003eclass=\u0026#34;highlight\u003c/span\u003e \u003cspan class=\"err\"\u003e([a-zA-Z]+)\u0026#34;\u0026gt;.*?\u0026lt;\\/figure\u0026gt;/,\u003c/span\u003e \u003cspan class=\"err\"\u003efunction\u003c/span\u003e \u003cspan class=\"err\"\u003e()\u003c/span\u003e \u003cspan class=\"err\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"err\"\u003evar\u003c/span\u003e \u003cspan class=\"err\"\u003elanguage\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003eRegExp.$1\u003c/span\u003e \u003cspan class=\"err\"\u003e||\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;plain\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"err\"\u003evar\u003c/span\u003e \u003cspan class=\"err\"\u003elastMatch\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003eRegExp.lastMatch\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"err\"\u003elastMatch\u003c/span\u003e \u003cspan class=\"err\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003elastMatch.replace(/\u0026lt;figure\u003c/span\u003e \u003cspan class=\"err\"\u003eclass=\u0026#34;highlight\u003c/span\u003e \u003cspan class=\"err\"\u003e/,\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;\u0026lt;figure\u003c/span\u003e \u003cspan class=\"err\"\u003eclass=\u0026#34;iseeu\u003c/span\u003e \u003cspan class=\"err\"\u003ehighlight\u003c/span\u003e \u003cspan class=\"err\"\u003e/\u0026#39;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"err\"\u003ereturn\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;\u0026lt;div\u003c/span\u003e \u003cspan class=\"err\"\u003eclass=\u0026#34;highlight-wrap\u0026#34;\u0026#39;\u003c/span\u003e \u003cspan class=\"err\"\u003e+\u003c/span\u003e \u003cspan class=\"err\"\u003eattributesStr\u003c/span\u003e \u003cspan class=\"err\"\u003e+\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;data-rel=\u0026#34;\u0026#39;\u003c/span\u003e \u003cspan class=\"err\"\u003e+\u003c/span\u003e \u003cspan class=\"err\"\u003elanguage.toUpperCase()\u003c/span\u003e \u003cspan class=\"err\"\u003e+\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;\u0026#34;\u0026gt;\u0026#39;\u003c/span\u003e \u003cspan class=\"err\"\u003e+\u003c/span\u003e \u003cspan class=\"err\"\u003elastMatch\u003c/span\u003e \u003cspan class=\"err\"\u003e+\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026#39;\u0026lt;/div\u0026gt;\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nt\"\u003edata\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 themes/next/source/css/_common/components/highlight/highlight.styl 的基础上调整了下样式，包裹上一层类 mac Panel 的效果。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e==注： 这里不用删除原来 highlight.styl 里边的内容，只需要在末尾添加下面代码即可==\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nc\"\u003ehighlight-wrap\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"nt\"\u003edata-rel\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003erelative\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eoverflow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003ehidden\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eborder-radius\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ebox-shadow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"nb\"\u003ergba\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003emargin\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e35\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"err\"\u003e::\u003c/span\u003e\u003cspan class=\"kp\"\u003e-webkit-\u003c/span\u003e\u003cspan class=\"err\"\u003escrollbar\u003c/span\u003e \u003cspan class=\"err\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e::\u003c/span\u003e\u003cspan class=\"nd\"\u003e-webkit-scrollbar-track\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kp\"\u003e-webkit-\u003c/span\u003e\u003cspan class=\"k\"\u003ebox-shadow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003einset\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"nb\"\u003ergba\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eborder-radius\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e::\u003c/span\u003e\u003cspan class=\"nd\"\u003e-webkit-scrollbar-thumb\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eborder-radius\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kp\"\u003e-webkit-\u003c/span\u003e\u003cspan class=\"k\"\u003ebox-shadow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003einset\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"nb\"\u003ergba\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e::\u003c/span\u003e\u003cspan class=\"nd\"\u003ebefore\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003ewhite\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eattr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003erel\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e38\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eline-height\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e38\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ebackground\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mh\"\u003e#21252b\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mh\"\u003e#fff\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efont-size\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003eabsolute\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003etop\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"kt\"\u003e%\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efont-family\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Source Sans Pro\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003esans-serif\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efont-weight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003ebold\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003epadding\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"mi\"\u003e80\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003etext-indent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efloat\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e::\u003c/span\u003e\u003cspan class=\"nd\"\u003eafter\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003eabsolute\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kp\"\u003e-webkit-\u003c/span\u003e\u003cspan class=\"k\"\u003eborder-radius\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"kt\"\u003e%\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eborder-radius\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"kt\"\u003e%\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ebackground\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mh\"\u003e#fc625d\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003etop\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emargin-top\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kp\"\u003e-webkit-\u003c/span\u003e\u003cspan class=\"k\"\u003ebox-shadow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"mh\"\u003e#fdbc40\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"mh\"\u003e#35cd4b\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ebox-shadow\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"mh\"\u003e#fdbc40\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"kt\"\u003epx\u003c/span\u003e \u003cspan class=\"mh\"\u003e#35cd4b\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ez-index\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 highlight.styl 中找到如下部分代码，修改 margin 为 36px 0 0 0：\u003c/p\u003e","title":"Hexo Next主题代码块美化"},{"content":"1.中断机制的诞生 为了解决早期计算机资源利用率低的的问题，人们发明了操作系统，引入了中断机制，实现多道程序并发执行。\n本质：发生了中断也就意味着需要操作系统介入，展开管理工作。CPU 收到计时部件发送的中断信号，切换为内核态，操作系统负责处理中断。\n2.中断的概念和作用 当中断发生时，CPU 立即进入核心态。 当中断发生后，当前运行的进程暂停执行，并由操作系统内核对中断进行处理。 对于不用的中断信号，会进行不同的处理。 中断可以使 CPU 从用户态切换为核心态，使操作系统获得计算机的控制权。有了终端，才能够实现多道程序并发执行。只有在核心态操作系统才能够执行特权指令。从用户态切换到核心态是通过中断实现的，并且是唯一的途径。\n3.中断的分类 中断（广义上的）：\n内中断（也称异常，例外，陷入）\n信号来源：CPU内部，与当前执行的指令有关。\n自愿中断——指令中断（系统中断）\n强迫中断——硬件故障或软件中断\n外中断（狭义上的中断）\n信号来源：CPU外部与但钱执行的指令无关。\n外设请求\n人工干预\n另一种分类方式：\n4.外部中断的处理过程 每条指令执行结束后，CPU 检查是否有外部中断信号 若有外部中断信号，则需要保护中断进程的 CPU 环境 根据中断信号类型转入相应的中断处理程序 恢复原进程的 CPU 环境并推出中断，返回原进程继续往下执行 5.知识图谱 ","permalink":"http://localhost:1313/posts/notes/os/%E4%BA%94%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8/","summary":"\u003ch4 id=\"1中断机制的诞生\"\u003e1.中断机制的诞生\u003c/h4\u003e\n\u003cp\u003e为了解决早期计算机资源利用率低的的问题，人们发明了\u003cstrong\u003e操作系统\u003c/strong\u003e，引入了\u003cstrong\u003e中断机制\u003c/strong\u003e，实现多道程序并发执行。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e本质：发生了中断也就意味着需要操作系统介入，展开管理工作。\u003cstrong\u003eCPU 收到计时部件发送的\u003c/strong\u003e中断信号\u003c/strong\u003e，切换为\u003cstrong\u003e内核态\u003c/strong\u003e，操作系统负责处理中断。\u003c/p\u003e\n\u003ch4 id=\"2中断的概念和作用\"\u003e2.中断的概念和作用\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003e当中断发生时，CPU 立即进入\u003cstrong\u003e核心态\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e当中断发生后，当前运行的进程暂停执行，并由操作系统内核对中断进行处理。\u003c/li\u003e\n\u003cli\u003e对于不用的中断信号，会进行不同的处理。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e中断\u003c/strong\u003e可以使 CPU 从\u003cstrong\u003e用户态切换为核心态，使操作系统获得计算机的控制权。\u003cstrong\u003e有了终端，才能够实现多道程序并发执行。只有在\u003c/strong\u003e核心态\u003c/strong\u003e操作系统才能够执行特权指令。从\u003cstrong\u003e用户态切换到核心态是通过中断实现的，并且是唯一的途径\u003c/strong\u003e。\u003c/p\u003e\n\u003ch4 id=\"3中断的分类\"\u003e3.中断的分类\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e中断（广义上的）：\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e内中断（也称异常，例外，陷入）\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e信号来源：CPU\u003cstrong\u003e内部\u003c/strong\u003e，与当前执行的指令有关。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e自愿中断——指令中断（系统中断）\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e强迫中断——硬件故障或软件中断\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e外中断（狭义上的中断）\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e信号来源：CPU\u003cstrong\u003e外部\u003c/strong\u003e与但钱执行的指令无关。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e外设请求\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e人工干预\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e另一种分类方式：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"分类\" loading=\"lazy\" src=\"https://s1.ax1x.com/2022/04/10/LAsMqI.png\"\u003e\u003c/p\u003e\n\u003ch4 id=\"4外部中断的处理过程\"\u003e4.外部中断的处理过程\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003e每条指令执行结束后，CPU 检查是否有外部中断信号\u003c/li\u003e\n\u003cli\u003e若有外部中断信号，则需要保护中断进程的 CPU 环境\u003c/li\u003e\n\u003cli\u003e根据中断信号类型转入相应的中断处理程序\u003c/li\u003e\n\u003cli\u003e恢复原进程的 CPU 环境并推出中断，返回原进程继续往下执行\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch4 id=\"5知识图谱\"\u003e5.知识图谱\u003c/h4\u003e\n\u003cp\u003e\u003cimg alt=\"图谱\" loading=\"lazy\" src=\"https://s1.ax1x.com/2022/04/10/LA6gbR.png\"\u003e\u003c/p\u003e","title":"五、中断和异常"},{"content":"1.运行机制 什么是指令， “指令”和“代码”有什么区别？\n比如：C语言指令代码源文件经过编译后变成机器语言指令，而一条高级语言的代码可能对应着多条指令。\n简而言之，“指令”就是CPU能够处理和执行的最基本的命令，就是让CPU干一件具体的事情。\n（1）两种指令：\n特权指令：如内存清零指令（不允许用户程序使用） 非特权指令：如普通的运算指令 问：CPU怎样执行特权指令？\n（2）两种处理器状态：\n用户态（目态）：在该状态下CPU只能执行非特权指令。 核心态（管态）：在该状态下特权指令和非特权指令都可以执行。 在CPU中存在一个用户程序状态寄存器（PSW），在其中的某一个标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态。\n（3）两种程序：\n内核程序：操作系统的内核程序是系统的管理者，既可以执行特权指令，也可以执行非特权指令，运行在核心态。 应用程序：为了保证系统能安全运行，普通应用程序只能执行非特权指令，运行在用户态。 2.操作系统内核 [\n内核是计算机配置上的底层软件，是操作系统最基本，最核心的部分。\n实现操作系统内核功能的哪些程序就是内核程序。\n操作系统内核包括：\n时钟管理：实现计时功能。 中断处理：负责实现中断机制 原语： 是一种特殊的程序 处于操作系统最底层、最接近硬件的部分 这种运行的程序具有原子性，其运行过程不可中断 运行时间较短，调用频繁 对系统资源进行管理的功能： 进程管理 存储管理 设备管理 内核又可被分为：大内核和**微内核。**如果内核中包含存储管理，进程管理，设备管理等功能的就被叫做大内核，只包含最基本如时钟管理，中断处理，原语等的就被叫做微内核。\n3.操作系统的体系结构 操作系统的体系结构：\n大内核 将操作系统的主要功能模块都作为系统内核，运行在核心态 优点：高性能 缺点：内核代码庞大，结构混乱，难以维护 微内核 只把最基本的功能保留在内核 优点：内核功能少，结构清晰，方便维护 缺点：需要频繁的在核心态和用户态之间切换，性能低 比如：\n","permalink":"http://localhost:1313/posts/notes/os/%E5%9B%9B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%B3%BB%E7%BB%9F/","summary":"\u003ch4 id=\"1运行机制\"\u003e1.运行机制\u003c/h4\u003e\n\u003cp\u003e什么是指令， “指令”和“代码”有什么区别？\u003c/p\u003e\n\u003cp\u003e比如：C语言指令代码源文件经过编译后变成机器语言指令，而一条高级语言的代码可能对应着多条指令。\u003c/p\u003e\n\u003cp\u003e简而言之，\u003cstrong\u003e“指令”就是CPU能够处理和执行的最基本的命令\u003c/strong\u003e，就是让CPU干一件具体的事情。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（1）两种指令：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e特权指令\u003c/strong\u003e：如内存清零指令（不允许用户程序使用）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e非特权指令\u003c/strong\u003e：如普通的运算指令\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e问：CPU怎样执行特权指令？\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（2）两种处理器状态：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e用户态（目态）\u003c/strong\u003e：在该状态下CPU只能执行非特权指令。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e核心态（管态）\u003c/strong\u003e：在该状态下特权指令和非特权指令都可以执行。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在CPU中存在一个\u003cstrong\u003e用户程序状态寄存器（PSW）\u003c/strong\u003e，在其中的某一个标志位来标识当前处理器处于什么状态。如0为用户态，1为核心态。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（3）两种程序：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e内核程序\u003c/strong\u003e：操作系统的内核程序是系统的管理者，既可以执行特权指令，也可以执行非特权指令，\u003cstrong\u003e运行在核心态\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e应用程序\u003c/strong\u003e：为了保证系统能安全运行，普通应用程序只能执行非特权指令，\u003cstrong\u003e运行在用户态\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2操作系统内核\"\u003e2.操作系统内核\u003c/h4\u003e\n\u003cp\u003e[\u003cimg alt=\"LANsi9.md.png\" loading=\"lazy\" src=\"https://s1.ax1x.com/2022/04/10/LANsi9.md.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e内核\u003c/strong\u003e是计算机配置上的底层\u003cstrong\u003e软件\u003c/strong\u003e，是操作系统最基本，最核心的部分。\u003c/p\u003e\n\u003cp\u003e实现操作系统内核功能的哪些程序就是\u003cstrong\u003e内核程序\u003c/strong\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e操作系统内核包括：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e时钟管理\u003c/strong\u003e：实现计时功能。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e中断处理\u003c/strong\u003e：负责实现中断机制\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e原语\u003c/strong\u003e：\n\u003cul\u003e\n\u003cli\u003e是一种特殊的程序\u003c/li\u003e\n\u003cli\u003e处于操作系统最底层、最接近硬件的部分\u003c/li\u003e\n\u003cli\u003e这种运行的程序具有\u003cstrong\u003e原子性\u003c/strong\u003e，其运行过程不可中断\u003c/li\u003e\n\u003cli\u003e运行时间较短，调用频繁\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e对系统资源进行管理的功能\u003c/strong\u003e：\n\u003cul\u003e\n\u003cli\u003e进程管理\u003c/li\u003e\n\u003cli\u003e存储管理\u003c/li\u003e\n\u003cli\u003e设备管理\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\u003c/blockquote\u003e\n\u003cp\u003e内核又可被分为：\u003cstrong\u003e大内核\u003c/strong\u003e和**微内核。**如果内核中包含存储管理，进程管理，设备管理等功能的就被叫做大内核，只包含最基本如时钟管理，中断处理，原语等的就被叫做微内核。\u003c/p\u003e\n\u003ch4 id=\"3操作系统的体系结构\"\u003e3.操作系统的体系结构\u003c/h4\u003e\n\u003cp\u003e操作系统的体系结构：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e大内核\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e将操作系统的主要功能模块都作为系统内核，运行在核心态\u003c/li\u003e\n\u003cli\u003e优点：高性能\u003c/li\u003e\n\u003cli\u003e缺点：内核代码庞大，结构混乱，难以维护\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e微内核\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e只把最基本的功能保留在内核\u003c/li\u003e\n\u003cli\u003e优点：内核功能少，结构清晰，方便维护\u003c/li\u003e\n\u003cli\u003e缺点：需要频繁的在核心态和用户态之间切换，性能低\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e比如：\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"比喻\" loading=\"lazy\" src=\"https://s1.ax1x.com/2022/04/10/LAU2fs.png\"\u003e\u003c/p\u003e","title":"四、操作系统的运行机制与体系系统"},{"content":"在 GithubPages 上搭建 Hexo 并配置 NexT 主题 啰里啰唆 记录一下自己搭建 blog 的过程，之前在 vps 上配置过 word press，但是一直也没更新，而且好的 vps 很贵维护成本也很高，索性干脆不用了，就尝试一下使用 hexo 在 github 上搭建 blog，效果还不错，总共也就历时两天。网上类似的教程也很多，这里总结记录一下，方便以后开新坑\n首先安装 Node.js 和 Git for Windows [Node.js 官网](Node.js (nodejs.org))，[Git for windows 官网](Git (git-scm.com))，Node.js 建议安装 LTS 长期支持版，支持周期更长且更稳定\nNode.js:点击第一个绿色的按钮下载 Node.js,版本不需要和图示一致，直接下载最新版即可。\nGit:点击网页左侧小电脑当中的 Download for windows，直接下载最新版即可无需与图示中版本一致。\n下载完成后按照默认安装设置安装即可。\n在 GitHub 上创建一个仓库 首先，需要一个 GitHub 账号。打开 GitHub 官网点击左上角的 sign in 就能注册了，不复述了很简单。进行这个过程可能需要科学上网，具体自行百度。\n创建一个 Github 仓库\n点击左上角头像，在弹出的下拉菜单中选择 Your repositories，待页面加载完毕后点击左上角绿色的new创建一个仓库。\n注意：仓库名务必是**==你的用户名.github.io==**,比如上面我的用户名是 ivy-lun,那么仓库名就是 ivy-lun.github.io,其他的保持默认即可，点击绿色按钮 Create repositories 即可创建一个仓库。\n太累了，过两天再更吧 ","permalink":"http://localhost:1313/posts/notes/hexo/%E5%9C%A8githubpages%E4%B8%8A%E6%90%AD%E5%BB%BAhexo%E5%B9%B6%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98/","summary":"\u003ch2 id=\"在-githubpages-上搭建-hexo-并配置-next-主题\"\u003e在 GithubPages 上搭建 Hexo 并配置 NexT 主题\u003c/h2\u003e\n\u003ch4 id=\"啰里啰唆\"\u003e啰里啰唆\u003c/h4\u003e\n\u003cp\u003e记录一下自己搭建 blog 的过程，之前在 vps 上配置过 word press，但是一直也没更新，而且好的 vps 很贵维护成本也很高，索性干脆不用了，就尝试一下使用 hexo 在 github 上搭建 blog，效果还不错，总共也就历时两天。网上类似的教程也很多，这里总结记录一下，方便以后开新坑\u003c/p\u003e\n\u003ch4 id=\"首先安装-nodejs-和-git-for-windows\"\u003e首先安装 Node.js 和 Git for Windows\u003c/h4\u003e\n\u003cp\u003e[Node.js 官网](\u003ca href=\"https://nodejs.org/en/\"\u003eNode.js (nodejs.org)\u003c/a\u003e)，[Git for windows 官网](\u003ca href=\"https://git-scm.com/\"\u003eGit (git-scm.com)\u003c/a\u003e)，Node.js 建议安装 LTS 长期支持版，支持周期更长且更稳定\u003c/p\u003e\n\u003cp\u003eNode.js:点击第一个绿色的按钮下载 Node.js,版本不需要和图示一致，直接下载最新版即可。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"LkbK0K.png\" loading=\"lazy\" src=\"https://s1.ax1x.com/2022/04/10/LkbK0K.png\"\u003e\u003c/p\u003e\n\u003cp\u003eGit:点击网页左侧小电脑当中的 Download for windows，直接下载最新版即可无需与图示中版本一致。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"LkbmOx.png\" loading=\"lazy\" src=\"https://s1.ax1x.com/2022/04/10/LkbmOx.png\"\u003e\u003c/p\u003e\n\u003cp\u003e下载完成后按照默认安装设置安装即可。\u003c/p\u003e\n\u003ch4 id=\"在-github-上创建一个仓库\"\u003e在 GitHub 上创建一个仓库\u003c/h4\u003e\n\u003cp\u003e首先，需要一个 GitHub 账号。打开 GitHub 官网点击左上角的 sign in 就能注册了，不复述了很简单。进行这个过程可能需要\u003cstrong\u003e科学\u003c/strong\u003e上网，具体自行百度。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e创建一个 Github 仓库\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e点击左上角头像，在弹出的下拉菜单中选择 \u003cstrong\u003eYour repositories\u003c/strong\u003e，待页面加载完毕后点击左上角绿色的\u003cstrong\u003enew\u003c/strong\u003e创建一个仓库。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"Lkbum6.png\" loading=\"lazy\" src=\"https://s1.ax1x.com/2022/04/10/Lkbum6.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e注意\u003c/strong\u003e：仓库名务必是**==你的用户名.github.io==**,比如上面我的用户名是 ivy-lun,那么仓库名就是 ivy-lun.github.io,其他的保持默认即可，点击绿色按钮 Create repositories 即可创建一个仓库。\u003c/p\u003e","title":"在GithubPages上搭建Hexo并配置NexT主题"},{"content":"· markdown 笔记 1.代码块 ```java 语言代码 ``` public static void main(String[] args){ System.out.print(\u0026#34;Hello World!\u0026#34;); } 2.标题 # 一级标题 ## 二级标题 ### 三级标题 ... ###### 六级标题 一级标题 二级标题 三级标题 \u0026hellip; 六级标题 3.字体 **加粗** ==高亮== ~~删除线~~ _斜体_ 加粗\n删除线\n斜体\n4.引用 \u0026gt; 作者：某某某 \u0026gt; \u0026gt; \u0026gt; 二级作者 \u0026gt; \u0026gt; \u0026gt; \u0026gt; \u0026gt; 三级作者 作者：某某某\n二级作者\n三级作者\n5.分割 ## 分割线 分割线 2 --- 分割线 1\n分割线 2\n6.插图 在线图片 ![图片的名字](/图片路径) 本地图片 ![图片的名字](/图片url) 7.超链接 [名字](地址) 我的网易云歌单\n8.列表 无序列表 - 目录1 - 目录2 - 目录3 - 目录4 有序列表 1. 名称 无序列表\n目录 1\n目录 2\n有序列表\n自动生成的 2\n9.表格 | 你好 | 你好 | 早安 | | ---- | ---- | ---- | | 晚安 | | | | | | | | | | | 表格\n你好 你好 早安 晚安 ","permalink":"http://localhost:1313/posts/notes/markdown/-markdown%E7%AC%94%E8%AE%B0/","summary":"\u003ch3 id=\"-markdown-笔记\"\u003e· markdown 笔记\u003c/h3\u003e\n\u003ch5 id=\"1代码块\"\u003e1.代码块\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e``\u003cspan class=\"sb\"\u003e`java 语言代码\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sb\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e``\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch5 id=\"2标题\"\u003e2.标题\u003c/h5\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"gh\"\u003e# 一级标题\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"gh\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"gu\"\u003e## 二级标题\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"gu\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"gu\"\u003e### 三级标题\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"gu\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"gu\"\u003e###### 六级标题\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"一级标题\"\u003e一级标题\u003c/h1\u003e\n\u003ch2 id=\"二级标题\"\u003e二级标题\u003c/h2\u003e\n\u003ch3 id=\"三级标题\"\u003e三级标题\u003c/h3\u003e\n\u003ch3 id=\"heading\"\u003e\u0026hellip;\u003c/h3\u003e\n\u003ch6 id=\"六级标题\"\u003e六级标题\u003c/h6\u003e\n\u003ch3 id=\"3字体\"\u003e3.字体\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e**加粗**\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e==高亮==\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"gd\"\u003e~~删除线~~\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"ge\"\u003e_斜体_\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e加粗\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdel\u003e删除线\u003c/del\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e斜体\u003c/em\u003e\u003c/p\u003e\n\u003ch3 id=\"4引用\"\u003e4.引用\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"ge\"\u003e作者：某某某\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"ge\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003e\u003c/span\u003e\u003cspan class=\"ge\"\u003e\u0026gt; \u0026gt; 二级作者\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"ge\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"ge\"\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"ge\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"ge\"\u003e\u0026gt; \u0026gt; 三级作者\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e作者：某某某\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e二级作者\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e三级作者\u003c/p\u003e\u003c/blockquote\u003e\u003c/blockquote\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"5分割\"\u003e5.分割\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"gu\"\u003e## 分割线\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"gu\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e分割线 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e---\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e分割线 1\u003c/p\u003e","title":"markdown笔记"},{"content":"1. 手工操作阶段 缺点：用户独占全机，人机速度矛盾导致资源利用率极低。人的速度慢，输入输出速度也慢，但计算机处理速度极快，人机速度矛盾。\n2. 批处理阶段 （1）单道批处理系统\n引入脱机输入/输出技术（用磁带完成），并监督程序负责控制作业的输入、输出。\n主要优点：一定程度缓解了人机速度矛盾，资源利用率有所提升\n主要缺点：内存中仅能有一道程序运行，只有该程序运行结束之后才能进入到下一道程序，**cpu 有大量的时间都是在空闲等待 I/O 完成，**资源利用率仍然很低。\n（2）多道批处理系统\n在多道批处理系统中，操作系统开始出现。\n主要优点：多道程序并发执行，共享计算机资源，资源利用率大幅度提升。\n主要缺点：用户响应时间长，没有人机交互功能（用户不能对执行的程序进行任何操作）。\n在单道批处理系统中，输入，计算和输出都是串行进行，资源利用率低。\n而在多道批处理系统中，当一个系统资源不再被使用时，可以提前进行下一个任务，系统并行执行任务，资源利用率大幅度提高。\n（3）分时操作系统\n计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机交互。\n主要优点：用户请求可以被即时响应，解决了人机交互的问题，允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在。\n主要却带你：不能优先处理一些紧急任务，操作系统的各个用户、作业都是完全公平的，循环为每个用户、作业服务一个时间片，不区分任务的紧急性。\n（4）实时操作系统\n主要优点：可以实时处理一些紧急任务，某些紧急任务不需要时间片排队。\n在实时操作系统的控制下，计算机接受到外部信号后及时进行处理，并且要在严格的时间限制内处理完成事件，实时操作系统的主要特点是及时性和可靠性。\n实时操作系统可分为：\n硬实时系统：必须在绝对严格的规定时间内完成处理。如导弹控制系统，自动驾驶系统。\n软实时系统：能接受偶尔违反时间规定。如 12306 火车订票系统。\n（5）网络操作系统\n伴随计算机网络的发展而诞生的，能把网络的各个计算机有机地结合起来，实现数据传送等功能，实现网络中各种资源的共享（如文件共享）和各个计算机之间的通信。\n（6）分布式操作系统\n主要特点是分布性和并行性，系统中的割台计算机地位相同，任何工作都可以分布在这些计算机上，由他们并行、协同完成这个任务。\n（7）个人计算机操作系统\n略，如 windows，macos 等\n","permalink":"http://localhost:1313/posts/notes/os/%E4%B8%89%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%91%E5%B1%95%E5%92%8C%E5%88%86%E7%B1%BB/","summary":"\u003ch4 id=\"1-手工操作阶段\"\u003e1. 手工操作阶段\u003c/h4\u003e\n\u003cp\u003e缺点：用户独占全机，人机速度矛盾导致资源利用率极低。人的速度慢，输入输出速度也慢，但计算机处理速度极快，人机速度矛盾。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"手工操作阶段\" loading=\"lazy\" src=\"https://s1.ax1x.com/2022/04/10/LA2eu4.png\"\u003e\u003c/p\u003e\n\u003ch4 id=\"2-批处理阶段\"\u003e2. 批处理阶段\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e（1）单道批处理系统\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e引入\u003cstrong\u003e脱机输入/输出技术\u003c/strong\u003e（用磁带完成），并\u003cstrong\u003e监督程序\u003c/strong\u003e负责控制作业的输入、输出。\u003c/p\u003e\n\u003cp\u003e主要优点：一定程度缓解了人机速度矛盾，资源利用率有所提升\u003c/p\u003e\n\u003cp\u003e主要缺点：\u003cstrong\u003e内存中仅能有一道程序运行\u003c/strong\u003e，只有该程序运行结束之后才能进入到下一道程序，**cpu 有大量的时间都是在空闲等待 I/O 完成，**资源利用率仍然很低。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"单道批处理系统\" loading=\"lazy\" src=\"https://s1.ax1x.com/2022/04/10/LA2nb9.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（2）多道批处理系统\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e在多道批处理系统中，\u003cstrong\u003e操作系统\u003c/strong\u003e开始出现。\u003c/p\u003e\n\u003cp\u003e主要优点：多道程序\u003cstrong\u003e并发\u003c/strong\u003e执行，\u003cstrong\u003e共享\u003c/strong\u003e计算机资源，\u003cstrong\u003e资源利用率大幅度提升\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e主要缺点：用户响应时间长，\u003cstrong\u003e没有人机交互功能\u003c/strong\u003e（用户不能对执行的程序进行任何操作）。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在单道批处理系统中，输入，计算和输出都是串行进行，资源利用率低。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg alt=\"1\" loading=\"lazy\" src=\"https://s1.ax1x.com/2022/04/10/LA2gbj.png\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e而在多道批处理系统中，当一个系统资源不再被使用时，可以提前进行下一个任务，系统\u003cstrong\u003e并行执行任务\u003c/strong\u003e，资源利用率大幅度提高。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg alt=\"2\" loading=\"lazy\" src=\"https://s1.ax1x.com/2022/04/10/LA2Wan.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（3）分时操作系统\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e计算机以\u003cstrong\u003e时间片\u003c/strong\u003e为单位\u003cstrong\u003e轮流为各个用户/作业服务\u003c/strong\u003e，各个用户可通过终端与计算机交互。\u003c/p\u003e\n\u003cp\u003e主要优点：用户请求可以被即时响应，\u003cstrong\u003e解决了人机交互的问题\u003c/strong\u003e，允许多个用户同时使用一台计算机，并且用户对计算机的操作\u003cstrong\u003e相互独立\u003c/strong\u003e，感受不到别人的存在。\u003c/p\u003e\n\u003cp\u003e主要却带你：\u003cstrong\u003e不能优先处理一些紧急任务\u003c/strong\u003e，操作系统的各个用户、作业都是完全公平的，循环为每个用户、作业服务一个时间片，不区分任务的紧急性。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（4）实时操作系统\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e主要优点：可以实时处理一些紧急任务，某些紧急任务不需要时间片排队。\u003c/p\u003e\n\u003cp\u003e在实时操作系统的控制下，计算机接受到外部信号后及时进行处理，并且\u003cstrong\u003e要在严格的时间限制内处理完成事件\u003c/strong\u003e，实时操作系统的主要特点是\u003cstrong\u003e及时性和可靠性\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e实时操作系统可分为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e硬实时系统：必须在\u003cstrong\u003e绝对严格\u003c/strong\u003e的规定时间内完成处理。如导弹控制系统，自动驾驶系统。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e软实时系统：能接受偶尔违反时间规定。如 12306 火车订票系统。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e（5）网络操作系统\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e伴随计算机网络的发展而诞生的，能把网络的各个计算机有机地结合起来，实现数据传送等功能，\u003cstrong\u003e实现网络中各种资源的共享（如文件共享）和各个计算机之间的通信\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（6）分布式操作系统\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e主要特点是\u003cstrong\u003e分布性和并行性\u003c/strong\u003e，系统中的割台计算机地位相同，\u003cstrong\u003e任何工作都可以分布在这些计算机上，由他们并行、协同完成这个任务。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e（7）个人计算机操作系统\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e略，如 windows，macos 等\u003c/p\u003e","title":"三、操作系统的发展和分类"},{"content":"1.操作系统的概念 （1）操作系统是计算机中最基本的系统软件。\n（2）负责管理协调硬件、软件等计算机资源的工作\n（3）为上层用户、应用程序提供简单易用的服务\n2.操作系统的功能和目标 （1）作为系统资源的管理者\n处理机管理\n存储管理\n文件管理\n设备管理\n（2）作为用户和计算机硬件之间的接口\n命令接口\n用户直接使用的\n联机命令接口（也叫交互式命令接口，输入一句执行一句） 脱机命令接口（也叫批处理命令接口，输入一堆执行一堆） 程序接口（系统调用）\n用户通过程序间接实用\nGUI（图形用户界面）\n图形化用户操作界面\n（3）作为最接近硬件的层次\n扩充机器\n","permalink":"http://localhost:1313/posts/notes/os/%E4%BA%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8A%9F%E8%83%BD%E5%92%8C%E7%9B%AE%E6%A0%87/","summary":"\u003ch4 id=\"1操作系统的概念\"\u003e1.操作系统的概念\u003c/h4\u003e\n\u003cp\u003e（1）操作系统是计算机中最基本的系统软件。\u003c/p\u003e\n\u003cp\u003e（2）负责管理协调硬件、软件等计算机资源的工作\u003c/p\u003e\n\u003cp\u003e（3）为上层用户、应用程序提供简单易用的服务\u003c/p\u003e\n\u003ch4 id=\"2操作系统的功能和目标\"\u003e2.操作系统的功能和目标\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e（1）作为系统资源的管理者\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e处理机管理\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e存储管理\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e文件管理\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e设备管理\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e（2）作为用户和计算机硬件之间的接口\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e命令接口\u003c/p\u003e\n\u003cp\u003e用户直接使用的\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e联机命令接口（也叫\u003cstrong\u003e交互式命令接口\u003c/strong\u003e，输入一句执行一句）\u003c/li\u003e\n\u003cli\u003e脱机命令接口（也叫\u003cstrong\u003e批处理命令接口\u003c/strong\u003e，输入一堆执行一堆）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e程序接口（系统调用）\u003c/p\u003e\n\u003cp\u003e用户通过程序间接实用\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eGUI（图形用户界面）\u003c/p\u003e\n\u003cp\u003e图形化用户操作界面\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e（3）作为最接近硬件的层次\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e扩充机器\u003c/p\u003e","title":"二、操作系统的概念、功能和目标"},{"content":"● 操作系统的基本特征 操作系统的四个特性：并发性，共享性，虚拟性，异步性\n1. 并发性 并发是指两个或多个事件在同一时间间隔内发生，宏观上是同时发生的，但是微观上是交替发生的。\n操作系统的并发性指计算机系统中同时存在多个运行的程序。\n2. 共享性 即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。\n（1）两种资源共享方式\n互斥共享方式（一个时间段内只允许一个进程访问资源） 同时共享方式（允许一个时间段内由多个进程“同时”对他们进行访问） 同时是宏观上的概念，微观上资源往往是交替进行资源访问的（分时共享）。\n==并发性和共享性两者的关系：==\n假如使用 QQ 发送文件 A，使用微信发送文件 B. 1.两个进程正在并发执行（并发性） 2.需要共享地访问硬盘资源（共享性）\n如果失去并发行，系统中只有一个程序在执行，则共享性即失去意义。 如果失去共享性，QQ 和微信不能同时访问硬盘资源，就无法实现同时发送文件，也就无法并发。\n即并发性和共享性二者互为存在条件\n3. 虚拟性 虚拟是指把一个物理上的实体变为逻辑上的对应物，物理实体是实际存在的，而逻辑上对应物是用户感受到的。\n空分复用技术（如虚拟存储器） 时分复用技术（如虚拟处理器），微观上处理机在各个微小的时间段内交替着为各个进程服务。 4. 异步性 异步是指，在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。\n如果失去了并发性，则系统只能串行的执行所有的进程，每个程序的执行会一贯到底，只有系统拥有并发性，才有可能导致异步性。\n","permalink":"http://localhost:1313/posts/notes/os/%E4%B8%80%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%89%B9%E5%BE%81/","summary":"\u003ch2 id=\"-操作系统的基本特征\"\u003e● 操作系统的基本特征\u003c/h2\u003e\n\u003cp\u003e操作系统的四个特性：\u003cstrong\u003e并发性，共享性，虚拟性，异步性\u003c/strong\u003e\u003c/p\u003e\n\u003ch4 id=\"1-并发性\"\u003e1. 并发性\u003c/h4\u003e\n\u003cp\u003e并发是指两个或多个事件在同一时间间隔内发生，\u003cstrong\u003e宏观上是同时发生的\u003c/strong\u003e，但是\u003cstrong\u003e微观上是交替发生的\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e操作系统的并发性\u003c/strong\u003e指计算机系统中同时存在多个运行的程序。\u003c/p\u003e\n\u003ch4 id=\"2-共享性\"\u003e2. 共享性\u003c/h4\u003e\n\u003cp\u003e即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。\u003c/p\u003e\n\u003cp\u003e（1）两种资源共享方式\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e互斥共享方式（\u003cstrong\u003e一个时间段内只允许一个进程访问资源\u003c/strong\u003e）\u003c/li\u003e\n\u003cli\u003e同时共享方式（\u003cstrong\u003e允许一个时间段内由多个进程“同时”对他们进行访问\u003c/strong\u003e）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e同时\u003c/strong\u003e是宏观上的概念，微观上资源往往是交替进行资源访问的（分时共享）。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e==并发性和共享性两者的关系：==\u003c/p\u003e\n\u003cp\u003e假如使用 QQ 发送文件 A，使用微信发送文件 B. 1.两个进程正在并发执行（并发性） 2.需要共享地访问硬盘资源（共享性）\u003c/p\u003e\n\u003cp\u003e如果失去并发行，系统中只有一个程序在执行，则共享性即失去意义。\n如果失去共享性，QQ 和微信不能同时访问硬盘资源，就无法实现同时发送文件，也就无法并发。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e即并发性和共享性二者互为存在条件\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"3-虚拟性\"\u003e3. 虚拟性\u003c/h4\u003e\n\u003cp\u003e虚拟是指把一个物理上的实体变为逻辑上的对应物，物理实体是实际存在的，而逻辑上对应物是用户感受到的。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e空分复用技术（如虚拟存储器）\u003c/li\u003e\n\u003cli\u003e时分复用技术（如虚拟处理器），微观上处理机在各个微小的时间段内交替着为各个进程服务。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"4-异步性\"\u003e4. 异步性\u003c/h4\u003e\n\u003cp\u003e异步是指，在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。\u003c/p\u003e\n\u003cp\u003e如果失去了并发性，则系统只能串行的执行所有的进程，每个程序的执行会一贯到底，\u003cstrong\u003e只有系统拥有并发性，才有可能导致异步性。\u003c/strong\u003e\u003c/p\u003e","title":"一、操作系统的基本特征"},{"content":"在我梦想飞上天空的那一夜，\n我的梦就醒了。\n我在孤岛上大声歌唱，\n风却将我的声音吹散。\n星星一闪一闪地向我抱怨，\n说他们什么也听不到。\n天亮时，我疲惫地睡着了。\n我梦见梦在梦的彼岸朝我挥手。\n😊 ","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003e\u003cstrong\u003e在我梦想飞上天空的那一夜，\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e我的梦就醒了。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e我在孤岛上大声歌唱，\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e风却将我的声音吹散。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e星星一闪一闪地向我抱怨，\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e说他们什么也听不到。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e天亮时，我疲惫地睡着了。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e我梦见梦在梦的彼岸朝我挥手。\u003c/strong\u003e\u003c/p\u003e\n\u003ch1 id=\"heading\"\u003e😊\u003c/h1\u003e","title":"About"}]